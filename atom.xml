<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zane`s Blog 随心记录</title>
  <icon>https://www.gravatar.com/avatar/3bc3708a82cbabf51644f9e65b3590ab</icon>
  <subtitle>博主码农出身，入行十余载，学艺虽不精，但不乏实践思考，在此记录之！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.codesay.top/"/>
  <updated>2018-05-19T02:40:04.000Z</updated>
  <id>http://blog.codesay.top/</id>
  
  <author>
    <name>Zane.Xie</name>
    <email>xzyeah@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>aliyun linux cron任务执行问题解决过程记录与思考</title>
    <link href="http://blog.codesay.top/2017/06/28/aliyun-linux-cron%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95%E4%B8%8E%E6%80%9D%E8%80%83/"/>
    <id>http://blog.codesay.top/2017/06/28/aliyun-linux-cron任务执行问题解决过程记录与思考/</id>
    <published>2017-06-28T02:07:30.000Z</published>
    <updated>2018-05-19T02:40:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>近期在一项目研发过程中，使用kettle进行数据的同步工作，在开发测试环境与UAT环境使用cron定时2分钟执行一次时都可以正常执行，而正式部署到aliyun上时，发现数据不能正常同步。</p><blockquote><p>重要配置信息</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">~</span><br><span class="line">[tomcat@iZwz9heyx5d32p6w76hbd6Z ETL]$ pwd</span><br><span class="line">/home/tomcat/ETL</span><br><span class="line">[tomcat@iZwz9heyx5d32p6w76hbd6Z ETL]$ ll</span><br><span class="line">total 148</span><br><span class="line">-rw-r--r-- 1 tomcat tomcat 124416 Jun 29 10:59 ETL-kq.tar</span><br><span class="line">drwxrwxr-x 2 tomcat tomcat   4096 Jun  7 17:00 logs</span><br><span class="line">drwxrwxr-x 2 tomcat tomcat   4096 Jun 29 13:49 sync_kq_signlog</span><br><span class="line">-rwxrwxr-x 1 tomcat tomcat    191 Jun 30 09:49 sync_kq_signlog_1.sh</span><br><span class="line">-rwxrwxrwx 1 tomcat tomcat    301 Jun 29 17:46 sync_kq_signlog.sh</span><br><span class="line">drwxrwxr-x 2 tomcat tomcat   4096 Jun 29 11:00 sync_kq_userdata</span><br><span class="line">-rwxrwxr-x 1 tomcat tomcat    305 Jun 29 17:46 sync_kq_userdata.sh</span><br><span class="line">[tomcat@iZwz9heyx5d32p6w76hbd6Z ETL]$ crontab -l</span><br><span class="line">*/1 * * * * sh /home/tomcat/ETL/sync_kq_userdata.sh</span><br><span class="line">*/2 * * * * sh  /home/tomcat/ETL/sync_kq_signlog.sh</span><br><span class="line"></span><br><span class="line">[tomcat@iZwz9heyx5d32p6w76hbd6Z ETL]$ vi sync_kq_signlog_1.sh</span><br><span class="line"></span><br><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">/home/tomcat/kettle/kettle-5.2.0.0-209/data-integration/kitchen.sh /norep -file=/home/tomcat/ETL/sync_kq_signlog/kq_user_signlog.kjb &gt; /home/tomcat/ETL/logs/sync_kq_signlog.log</span><br><span class="line"></span><br><span class="line">~</span><br></pre></td></tr></table></figure><h2 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h2><ol><li><p>因为在uat环境运行的很好，所以第一步就去检查了所有的配置信息，未发现问题。</p></li><li><p>直接执行.sh脚本发现数据正常同步，初步怀疑crontab配置不对。</p></li><li><p>因为crontab配置也是从uat环境复制过来，未发现问题，习惯性的去除空格回车再加上。</p></li><li><p>使用root账号重启crond服务，查看sh脚本中所写的日志，发现仍然没有kettle执行日志，因此还是觉得cron没有执行，但查不到原因。</p></li><li><p>搜索cron不执行原因，没有太多有价值的资料，了解到一些cron配置与日志查看命令。</p></li><li><p>检查脚本发现etl log输出为&gt;到文件，忽略了日志被覆盖情况，发现始终有一条日志，改为&gt;&gt; , 考虑cron正常运行，sh脚本问题。</p></li><li><p>根据掌握的命令查看cron日志，确认cron有正常执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[tomcat@iZwz9heyx5d32p6w76hbd6Z ETL]$ tail -f /var/log/cron</span><br><span class="line">Jun 30 10:52:01 iZwz9heyx5d32p6w76hbd6Z CROND[28777]: (tomcat) CMD (sh /home/tomcat/ETL/sync_kq_userdata.sh)</span><br><span class="line">Jun 30 10:53:01 iZwz9heyx5d32p6w76hbd6Z CROND[28901]: (tomcat) CMD (sh /home/tomcat/ETL/sync_kq_userdata.sh)</span><br><span class="line">Jun 30 10:54:01 iZwz9heyx5d32p6w76hbd6Z CROND[28987]: (tomcat) CMD (sh  /home/tomcat/ETL/sync_kq_signlog.sh)</span><br><span class="line">Jun 30 10:54:01 iZwz9heyx5d32p6w76hbd6Z CROND[28988]: (tomcat) CMD (sh /home/tomcat/ETL/sync_kq_userdata.sh)</span><br></pre></td></tr></table></figure></li><li><p>搜索cron 情况下sh不执行的原因， 注意到有环境变量的原因</p></li><li><p>shell脚本上加上env &gt; xxx.log，输出log查看，发现环境变量存在问题</p></li><li><p>在sh脚本中加上环境变更，查看日志与执行结果，正常执行。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[tomcat@iZwz9heyx5d32p6w76hbd6Z ETL]$ cat sync_kq_signlog.sh</span><br><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">PATH=/usr/java/jdk1.7.0_79/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/tomcat/bin</span><br><span class="line"></span><br><span class="line">/home/tomcat/kettle/kettle-5.2.0.0-209/data-integration/kitchen.sh /norep -file=/home/tomcat/ETL/sync_kq_signlog/kq_user_signlog.kjb &gt; /home/tomcat/ETL/logs/sync_kq_signlog.log</span><br></pre></td></tr></table></figure><h2 id="总结思考"><a href="#总结思考" class="headerlink" title="总结思考"></a>总结思考</h2><p>看了上面的处理过程，可以发现经过了很多步骤，比较曲折，也花费了不少的时间。</p><p>事后总结一下，发现主要存在的问题有以下几点：</p><ol><li>重要结论的判定不严谨，导致问题定位错误，走了弯路<br> 对cron是否有执行的判断，依据不足</li><li>很多时候过度依赖经验和搜索引擎，对问题判断不清</li><li>对不熟悉的工具或内容有点想当然，没有深究</li></ol><p>改进方法：<br>严格按照问题定位处理方法进行</p><ol><li>初步列出问题可能产生的原因</li><li>按照优先级对原因进行排序</li><li>确认原因排查的严谨方法</li><li>逐一排查，验证</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h2&gt;&lt;p&gt;近期在一项目研发过程中，使用kettle进行数据的同步工作，在开发测试环境与UAT环境使用cron定时2分钟执行一次时都可以
      
    
    </summary>
    
      <category term="linux" scheme="http://blog.codesay.top/categories/linux/"/>
    
    
      <category term="linux" scheme="http://blog.codesay.top/tags/linux/"/>
    
      <category term="cron" scheme="http://blog.codesay.top/tags/cron/"/>
    
  </entry>
  
  <entry>
    <title>python2安装</title>
    <link href="http://blog.codesay.top/2017/06/03/python2%E5%AE%89%E8%A3%85/"/>
    <id>http://blog.codesay.top/2017/06/03/python2安装/</id>
    <published>2017-06-03T06:07:30.000Z</published>
    <updated>2018-05-19T02:40:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装python2"><a href="#安装python2" class="headerlink" title="安装python2"></a>安装python2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> linux上编译安装python2.7.5</span><br><span class="line"></span><br><span class="line">1. 下载python2.7.5，保存到 /data/qtongmon/software</span><br><span class="line">http://www.python.org/ftp/python/</span><br><span class="line"></span><br><span class="line">2. 解压文件</span><br><span class="line">tar xvf Python-2.7.5.tar.bz2</span><br><span class="line"></span><br><span class="line">3. 创建安装目录</span><br><span class="line">mkdir /usr/local/python27</span><br><span class="line"></span><br><span class="line">4. 安装python</span><br><span class="line">./configure --prefix=/usr/local/python27</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">5. 修改老版本的ln指向（注意：这里修改后，可能会影响yum的使用）</span><br><span class="line">mv /usr/bin/python /usr/bin/python2.4.3</span><br><span class="line">ln -s /usr/local/python27/bin/python /usr/bin/python</span><br><span class="line"></span><br><span class="line">参考:</span><br><span class="line">http://www.cnblogs.com/yuechaotian/archive/2013/06/03/3115482.html</span><br></pre></td></tr></table></figure><h2 id="安装pip及相关包"><a href="#安装pip及相关包" class="headerlink" title="安装pip及相关包"></a>安装pip及相关包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">官方：</span><br><span class="line">https://pypi.python.org/pypi/pip</span><br><span class="line"></span><br><span class="line">参考：</span><br><span class="line">http://blog.csdn.net/my2010sam/article/details/18315687</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装python2&quot;&gt;&lt;a href=&quot;#安装python2&quot; class=&quot;headerlink&quot; title=&quot;安装python2&quot;&gt;&lt;/a&gt;安装python2&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
      <category term="python" scheme="http://blog.codesay.top/categories/python/"/>
    
    
      <category term="python" scheme="http://blog.codesay.top/tags/python/"/>
    
      <category term="python2" scheme="http://blog.codesay.top/tags/python2/"/>
    
  </entry>
  
  <entry>
    <title>python3安装</title>
    <link href="http://blog.codesay.top/2017/06/03/python3%E5%AE%89%E8%A3%85/"/>
    <id>http://blog.codesay.top/2017/06/03/python3安装/</id>
    <published>2017-06-03T04:07:30.000Z</published>
    <updated>2018-05-19T02:40:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装python35"><a href="#安装python35" class="headerlink" title="安装python35"></a>安装python35</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"> linux上编译安装python3.5</span><br><span class="line"> </span><br><span class="line">1、CentOS6.5 安装Python 的依赖包</span><br><span class="line"></span><br><span class="line">yum groupinstall &quot;Development tools&quot;</span><br><span class="line">yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br><span class="line"></span><br><span class="line">2、下载Python3.5的源码包并编译</span><br><span class="line"></span><br><span class="line">wget https://www.python.org/ftp/python/3.5.0/Python-3.5.0.tgz</span><br><span class="line">tar xf Python-3.5.0.tgz</span><br><span class="line">cd Python-3.5.0</span><br><span class="line">./configure --prefix=/usr/local --enable-shared</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">ln –s /usr/local/bin/python3 /usr/bin/python3</span><br><span class="line"></span><br><span class="line">3、在运行Python之前需要配置库：</span><br><span class="line"></span><br><span class="line">echo /usr/local/lib &gt;&gt; /etc/ld.so.conf.d/local.conf</span><br><span class="line">ldconfig</span><br><span class="line"></span><br><span class="line">4、运行演示：</span><br><span class="line"></span><br><span class="line">python3 --version</span><br><span class="line">Python 3.5.0</span><br><span class="line"></span><br><span class="line">5、删除编译Python时所需要的库</span><br><span class="line"></span><br><span class="line">yum groupremove &quot;Development tools&quot; --remove-leaveas</span><br><span class="line">yum remove zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel --remove-leaves</span><br><span class="line"></span><br><span class="line">6、设置别名方便使用</span><br><span class="line"></span><br><span class="line">alias py=python3</span><br><span class="line"></span><br><span class="line">7、CentOS 安装easy_install、pip的方法            </span><br><span class="line"></span><br><span class="line">CentOS 安装easy_install的方法：</span><br><span class="line"></span><br><span class="line">wget -q http://peak.telecommunity.com/dist/ez_setup.py</span><br><span class="line">python ez_setup.py</span><br><span class="line">8、CentOS安装python包管理安装工具pip的方法如下：</span><br><span class="line"></span><br><span class="line">wget --no-check-certificate https://github.com/pypa/pip/archive/1.5.5.tar.gz</span><br><span class="line"></span><br><span class="line">注意：wget获取https的时候要加上：--no-check-certificate</span><br><span class="line"></span><br><span class="line">tar zvxf 1.5.5    #解压文件</span><br><span class="line">cd pip-1.5.5/</span><br><span class="line">python3 setup.py install</span><br><span class="line"></span><br><span class="line">OK，这样就安装好pip了，</span><br><span class="line"></span><br><span class="line">下面来安装 requests吧。</span><br><span class="line"></span><br><span class="line">pip3 install requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">参考:</span><br><span class="line">http://blog.csdn.net/shaobingj126/article/details/50290359</span><br></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1.Python3.5 installation fails: cannot open libpython3.5m.so.1.0</span><br><span class="line"></span><br><span class="line">export LD_LIBRARY_PATH=/usr/lib/</span><br><span class="line"></span><br><span class="line">http://stackoverflow.com/questions/38256696/python3-5-installation-fails-cannot-open-libpython3-5m-so-1-0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装python35&quot;&gt;&lt;a href=&quot;#安装python35&quot; class=&quot;headerlink&quot; title=&quot;安装python35&quot;&gt;&lt;/a&gt;安装python35&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
      <category term="python" scheme="http://blog.codesay.top/categories/python/"/>
    
    
      <category term="python" scheme="http://blog.codesay.top/tags/python/"/>
    
      <category term="python3" scheme="http://blog.codesay.top/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>系统（功能）设计的一些思考——方法篇</title>
    <link href="http://blog.codesay.top/2017/05/31/%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%8A%9F%E8%83%BD%EF%BC%89%E8%AE%BE%E8%AE%A1%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83%E2%80%94%E2%80%94%E6%96%B9%E6%B3%95%E7%AF%87/"/>
    <id>http://blog.codesay.top/2017/05/31/系统（功能）设计的一些思考——方法篇/</id>
    <published>2017-05-31T14:17:12.000Z</published>
    <updated>2018-05-19T02:40:04.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><strong>说明</strong>：本文讨论的系统设计侧重于需求已经明确下的系统功能设计。</li></ul><p>上一篇文章，我根据系统设计的实践，列举了系统设计过程中存在的一些问题。众所周知，在工业生产中，采用成熟的方法制造产品一般来说质量会更可靠。系统设计到了现在也与工业生产类似，采用成熟规则的设计方法才能保证系统的质量，避免跟着感觉走所带来的风险。我一直相信做任何事情之前一定要有方法论，根据方法论来做事，事情做成的可能性才更高。</p><p>这里我抛砖引玉，简述我所习得的系统设计的方法，一起探讨有什么好的办法能够提高系统设计质量。</p><p>一般来说系统设计过程可以分为以下5个过程。</p><h3 id="1-列举场景"><a href="#1-列举场景" class="headerlink" title="1. 列举场景"></a>1. 列举场景</h3><hr><p>拿到一个设计需求，我们首先应该要列举所有用例，并且根据业务需求重要性进行排序，最终确认最核心的1-2个CASE。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">以音乐电台为例，列举其用例：</span><br><span class="line">注册/登陆</span><br><span class="line">播放音乐</span><br><span class="line">音乐推荐</span><br><span class="line">通过对业务进行分析不难得出，播放音乐是其最核心的需求，</span><br><span class="line">对播放音乐需求进行拆分，播放音乐步骤如下：</span><br><span class="line">获取频道列表</span><br><span class="line">选择频道</span><br><span class="line">播放音乐</span><br></pre></td></tr></table></figure><h3 id="2-分析限制条件"><a href="#2-分析限制条件" class="headerlink" title="2. 分析限制条件"></a>2. 分析限制条件</h3><hr><p>限制条件主要是指一些非功能需求的约束，比如说用户量，日活跃用户量，性能要求等。</p><p>对于限制条件的分析，我们需要评估它对系统功能的影响。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">接上面的例子，我们首先需要了解需求的一些关键信息，然后据此来进行评估。</span><br><span class="line">假定电台的日活跃用户为100，000</span><br><span class="line">那我们据此就可以进行 用户量，流量，内存使用量的评估</span><br><span class="line">用户量：</span><br><span class="line">并发用户量：100,000/5 = 20,000</span><br><span class="line">峰值用户量：20,000 * 3 = 60,000</span><br><span class="line">一段时间后峰值用户：60,000*10 = 600,000</span><br><span class="line">流量：</span><br><span class="line">每个用户请求播放音乐量：1首/分钟</span><br><span class="line">音乐平均大小：3MB</span><br><span class="line">峰值流量：600,000 * 3MB/60 = 30GB每秒</span><br><span class="line">内存：</span><br><span class="line">每个用户内存量：10KB</span><br><span class="line">每日最大内存量：100,000 * 10 * 10 = 10GB</span><br></pre></td></tr></table></figure><h3 id="3-应用服务设计"><a href="#3-应用服务设计" class="headerlink" title="3. 应用服务设计"></a>3. 应用服务设计</h3><hr><p>应用服务设计主要方法是根据用例，进行服务的概要设计，并对服务进行整合。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">接上例</span><br><span class="line">注册/登陆，播放音乐，音乐推荐这3个用例，</span><br><span class="line">我们可以需要设计3个不同的服务。</span><br><span class="line">分别叫User Service, Channel Service, Music Sevice，</span><br><span class="line">同时我们对服务进行整合，提供一个接待/代理的服务，对用户的请求进行路由，过滤等。</span><br></pre></td></tr></table></figure><h3 id="4-设计数据结构与存储"><a href="#4-设计数据结构与存储" class="headerlink" title="4. 设计数据结构与存储"></a>4. 设计数据结构与存储</h3><hr><p>根据应用服务设计进行数据存储与结构的设计。此阶段主要对数据存储进行选择与明细，同时具体设计数据存储结构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">接上例子</span><br><span class="line">User Service由于存储的是用户信息，需要持久保持，更新、修改比较频繁且强调一致性，原子性，</span><br><span class="line">所以我们选用关系型数据库Mysql存储。</span><br><span class="line">Channel Service 对一致性的要求没有那么高，且经常需要查询读取，</span><br><span class="line">我们考虑用No-sql数据库如MongoDB进行存储。</span><br><span class="line">Music Service存储的是音乐的文件数据，我们直接用文件系统进行存储即可。</span><br></pre></td></tr></table></figure><h3 id="5-扩展优化"><a href="#5-扩展优化" class="headerlink" title="5. 扩展优化"></a>5. 扩展优化</h3><hr><p>扩展优化主要是根据业务的发展需求，在系统设计质量，广度，深度三个方面进行扩展。</p><p>质量主要提现在更好的性能等，在用户更多，或者文件更大的情况下，通过设计保证性能</p><p>广度体现在更多的功能需求需要进行满足</p><p>深度体现在更加复杂的业务逻辑进行处理</p><p>根据设计与需求进行评估，重复上面的步骤达到扩展优化的目标。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;说明&lt;/strong&gt;：本文讨论的系统设计侧重于需求已经明确下的系统功能设计。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上一篇文章，我根据系统设计的实践，列举了系统设计过程中存在的一些问题。众所周知，在工业生产中，采用成熟的方法制造产品一般来说质量会更可靠。
      
    
    </summary>
    
      <category term="设计" scheme="http://blog.codesay.top/categories/%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="系统设计" scheme="http://blog.codesay.top/tags/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>系统（功能）设计的一些思考——问题篇</title>
    <link href="http://blog.codesay.top/2017/05/28/%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%8A%9F%E8%83%BD%EF%BC%89%E8%AE%BE%E8%AE%A1%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83%E2%80%94%E2%80%94%E9%97%AE%E9%A2%98%E7%AF%87/"/>
    <id>http://blog.codesay.top/2017/05/28/系统（功能）设计的一些思考——问题篇/</id>
    <published>2017-05-28T14:07:12.000Z</published>
    <updated>2018-05-19T02:40:04.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><strong>说明</strong>：本文讨论的系统设计侧重于需求已经明确下的系统功能设计。</li></ul><h3 id="1-系统设计概述"><a href="#1-系统设计概述" class="headerlink" title="1. 系统设计概述"></a>1. 系统设计概述</h3><hr><p>按照百度百科的定义，系统设计是新系统的物理设计阶段，是指按照需求分析阶段输出的系统功能需求、逻辑模型，在用户环境条件下设计出一个可以实施的方案。</p><p>根据一般的业务实践，系统设计的过程中需要定义系统架构、组件、模块、接口和数据来满足特定需求。其中所指的系统架构主要是指系统的技术架构，是广义上所讲的架构中一个部分，关于架构的内容在这里就不展开了。</p><p>概括一下，系统设计处于需要分析与系统开发阶段中间，是连接两者的纽带，关系到需求的满足与实施。通常来讲，好的设计需要满足，分阶段开发、易用性、可扩展性、业务完整性、业务规范性等原则。</p><h3 id="2-系统设计产出"><a href="#2-系统设计产出" class="headerlink" title="2. 系统设计产出"></a>2. 系统设计产出</h3><hr><p>系统设计有这么丰富的内容，也需要有相应的产出，用于指导系统开发过程。通常来讲，产出主要包括系统概要设计和系统详细设计二部分的内容，有时候我们也会合二为一。</p><h3 id="3-系统设计实践"><a href="#3-系统设计实践" class="headerlink" title="3.系统设计实践"></a>3.系统设计实践</h3><hr><p>系统设计需要有这么多的产出，那我们通过怎样来获得这些产出呢，又是如何来确认这些产出是合适的呢。根据笔者的不算丰富的工作经验（主要在业务系统领域），对大多数程序研发人员来说，我们会根据公司的要求的产出物进行交付，简单点说就是公司QA或者领导要求有什么产出，我们就给出相应的东西，通常是文档。实际上写文档的过程就是一个思考设计的过程，但每个人可能是根据自己的经验、习惯以及对需求的认知来进行设计。</p><p>我们仔细想一想，上面这种模式下，存在哪些问题？这里我大致列举了几点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1）根据设计人员本身的经验，产出交付物质量参差不齐，影响开发</span><br><span class="line">2）依赖公司QA或者领导对于交付物的定义，目的不是为了用于开发，而是交差</span><br><span class="line">3）每个人甚至每次的设计方法都不一样，容易有所遗漏，影响交付</span><br><span class="line">4）对于一些业务上看似简单的部分，通常会忽略设计，往往会出现问题</span><br></pre></td></tr></table></figure><p>以上几点，都会影响系统设计结果好坏。系统研发实践表明，在整个系统生命周期中，越到后期纠偏改动的成本越高。系统设计相对来说处于整个生命周期的早期，提高系统设计质量具有重大的意义。</p><p>那么有没有什么办法能够提高系统设计质量，是否系统设计质只量能依赖设计人员的经验与能力呢？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;说明&lt;/strong&gt;：本文讨论的系统设计侧重于需求已经明确下的系统功能设计。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-系统设计概述&quot;&gt;&lt;a href=&quot;#1-系统设计概述&quot; class=&quot;headerlink&quot; title=&quot;1. 系统设计概
      
    
    </summary>
    
      <category term="设计" scheme="http://blog.codesay.top/categories/%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="系统设计" scheme="http://blog.codesay.top/tags/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>git flow应用规范说明</title>
    <link href="http://blog.codesay.top/2017/05/28/gitflow%E5%BA%94%E7%94%A8%E8%A7%84%E8%8C%83%E8%AF%B4%E6%98%8E/"/>
    <id>http://blog.codesay.top/2017/05/28/gitflow应用规范说明/</id>
    <published>2017-05-28T02:07:30.000Z</published>
    <updated>2018-05-19T02:40:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-flow应用规范说明"><a href="#git-flow应用规范说明" class="headerlink" title="git flow应用规范说明"></a>git flow应用规范说明</h1><p>我们前段时间从SVN切换到Git，经过培训与一段时间的使用，大家对git的基本使用比较熟悉，但对git flow还是不太熟练。下面就简单介绍一下各分支意义，以及开发过程中的应用场景。</p><h2 id="常用分支（流程默认）"><a href="#常用分支（流程默认）" class="headerlink" title="常用分支（流程默认）"></a>常用分支（流程默认）</h2><ul><li><p>Master 分支(Production)</p><p>  最近发布到生产环境的代码，最近发布的Release， 这个分支只能从其他分支合并，不能在这个分支直接修改</p></li><li><p>Develop 分支</p><p>  开发分支，包含所有要发布到下一个Release的代码，这个主要合并与其他分支，比如Feature分支</p></li><li><p>Feature 分支</p><p>  新的功能分支，开发完成后，合并回Develop分支进入下一个Release</p></li><li><p>Release 分支</p><p>  发布一个新Release的时，我们基于Develop分支创建一个Release分支，完成Release后，我们合并到Master和Develop分支</p></li><li><p>Hotfix 分支</p><p>  生产上发现新的Bug时候，我们需要创建一个Hotfix, 完成Hotfix后，我们合并回Master和Develop分支，所以Hotfix的改动会进入下一个Release</p></li></ul><h2 id="实际项目阶段应用"><a href="#实际项目阶段应用" class="headerlink" title="实际项目阶段应用"></a>实际项目阶段应用</h2><h3 id="1-初始项目"><a href="#1-初始项目" class="headerlink" title="1. 初始项目"></a>1. 初始项目</h3><ul><li>建立Master,Develop分支。</li><li>Master分支为锁定状态，开发人员无权限操作。从服务器上clone之后，默认切换到Develop分支。</li><li>此步由Master管理员完成。</li></ul><h3 id="2-功能开发（相对独立，较大功能）"><a href="#2-功能开发（相对独立，较大功能）" class="headerlink" title="2. 功能开发（相对独立，较大功能）"></a>2. 功能开发（相对独立，较大功能）</h3><ul><li>开发功能时，在本地建立Feature分支，完成功能开发测试后，合并加Develop分支。</li><li>此步为开发人员自行完成。</li></ul><h3 id="3-生产发布（正常版本）"><a href="#3-生产发布（正常版本）" class="headerlink" title="3. 生产发布（正常版本）"></a>3. 生产发布（正常版本）</h3><ul><li>基本完成所有功能开发，准备交付测试时。建立Release分支,在此分支上进行bug的修改与少量小功能的增加优化。</li><li>到版本发布前，所有修改在此分支进行，不属于此版本的功能增加，切换回Develop分支参考第2种情况进行。</li><li>版本发布后，合并分支到Develop和Master,并在Master分支打tag为release-v1.x.x</li><li>合并与tag建立由Master管理员完成。</li></ul><h3 id="4-生产紧急bug修复-包括紧急功能增加"><a href="#4-生产紧急bug修复-包括紧急功能增加" class="headerlink" title="4. 生产紧急bug修复(包括紧急功能增加)"></a>4. 生产紧急bug修复(包括紧急功能增加)</h3><ul><li>从Master分支创建Hotfix分支。</li><li>完成问题修改后，合并回Master和Develop分支，建议删除此分支并做tag。</li><li>合并与tag建立由Master管理员完成。</li></ul><hr><p>参考：<br><a href="http://www.cnblogs.com/cnblogsfans/p/5075073.html" target="_blank" rel="external">git flow guide</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git-flow应用规范说明&quot;&gt;&lt;a href=&quot;#git-flow应用规范说明&quot; class=&quot;headerlink&quot; title=&quot;git flow应用规范说明&quot;&gt;&lt;/a&gt;git flow应用规范说明&lt;/h1&gt;&lt;p&gt;我们前段时间从SVN切换到Git，经过培训与
      
    
    </summary>
    
      <category term="版本控制" scheme="http://blog.codesay.top/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    
      <category term="Git" scheme="http://blog.codesay.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之单例模式</title>
    <link href="http://blog.codesay.top/2017/05/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blog.codesay.top/2017/05/22/设计模式之单例模式/</id>
    <published>2017-05-22T14:07:12.000Z</published>
    <updated>2018-05-19T02:40:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式之单例模式"><a href="#设计模式之单例模式" class="headerlink" title="设计模式之单例模式"></a>设计模式之单例模式</h2><h3 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h3><hr><blockquote><p>单例模式，顾名思义用于保证类只有单独的实例，当然是在同一jvm与classloader前提下。</p></blockquote><h3 id="模式应用"><a href="#模式应用" class="headerlink" title="模式应用"></a>模式应用</h3><hr><blockquote><p>通常最常见的单例模式应该在配置文件的读取，内存缓存的使用以及new 对象开销很大的情况。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">通常，在应用中，配置文件的读取是一次性获取配置文件中所有的key/value对并放入对象中</span><br><span class="line">，我们获取单独的一个配置项，从对象中通过key获取即可。</span><br><span class="line">这个对象只需要一个实例就好了，</span><br><span class="line">如果每次获取一个配置项都需要new 一个对象，</span><br><span class="line">那所有的配置信息都会随着对象的创建加载到内存中，</span><br><span class="line">这势必会导致内存的不必要开支，浪费。</span><br></pre></td></tr></table></figure><h3 id="模式的类图"><a href="#模式的类图" class="headerlink" title="模式的类图"></a>模式的类图</h3><hr><p>略</p><h3 id="模式的实现"><a href="#模式的实现" class="headerlink" title="模式的实现"></a>模式的实现</h3><hr><p>单例模式的java实现一般有3种形式</p><ul><li>饿汉式</li><li>懒汉式</li><li>双重检查式</li></ul><p>3种形式各有特色与优势。</p><ol><li>饿汉式</li></ol><blockquote><p>利用static关键字与jvm的特性，在类实例化之前就已经产生类变量（final）存储类自己的对象。getInstance方法直接返回此对象即可</p></blockquote><blockquote><p>存在的问题：不管有没有用到对象都会被实例化，可能造成一定的浪费</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class IvyTower &#123;</span><br><span class="line">    private IvyTower() &#123;    &#125;</span><br><span class="line"></span><br><span class="line">    private final static IvyTower instance = new IvyTower();</span><br><span class="line"></span><br><span class="line">    public static IvyTower getInstance() &#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>懒汉式</li></ol><blockquote><p>所谓懒汉其实应该叫延迟加载（lazy load）比较恰当，这种用法也经常在编码中被使用到，用于节约系统资源，只有在需要时才会被实例化。</p></blockquote><blockquote><p>存在问题：在并发的情况下，需要使用synchroized关键字对方法进行同步，降低了性能</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class ThreadSafeLazyLoadIvyTower &#123;</span><br><span class="line"></span><br><span class="line">    private static ThreadSafeLazyLoadIvyTower instance;</span><br><span class="line"></span><br><span class="line">    private ThreadSafeLazyLoadIvyTower()&#123;    &#125;</span><br><span class="line"></span><br><span class="line">    public static synchronized ThreadSafeLazyLoadIvyTower getInstance() &#123;</span><br><span class="line">        if(instance == null) &#123;</span><br><span class="line">            instance = new ThreadSafeLazyLoadIvyTower();</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>双重检查式</li></ol><blockquote><p>双重检查double-check，我的理解是在懒汉式的基础上进行了一些性能的改进，让整个方法不再属于同步块中，提升了一定的性能。</p></blockquote><blockquote><p>由于低版本JVM对于volatile关键字的实现有问题，此方法只有在jdk1.5以上版本可行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class DoubleCheckIvyTower &#123;</span><br><span class="line"></span><br><span class="line">    private DoubleCheckIvyTower() &#123;    &#125;</span><br><span class="line"></span><br><span class="line">    private static volatile DoubleCheckIvyTower instance;</span><br><span class="line"></span><br><span class="line">    public static DoubleCheckIvyTower getInstance() &#123;</span><br><span class="line">        DoubleCheckIvyTower result = instance;</span><br><span class="line">        if(result == null) &#123;</span><br><span class="line">            synchronized (DoubleCheckIvyTower.class) &#123;</span><br><span class="line">                result = instance;</span><br><span class="line"></span><br><span class="line">                if(result == null) &#123;</span><br><span class="line">                    result = instance = new DoubleCheckIvyTower();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模式扩展"><a href="#模式扩展" class="headerlink" title="模式扩展"></a>模式扩展</h3><p>单例模式看似简单，但其中涉及到知识点，特别是和语言相关的特性还是比较多， 需要我们仔细的去揣摩，应用，理解。</p><p>参考：<br><a href="https://my.oschina.net/xianggao/blog/616385" target="_blank" rel="external">https://my.oschina.net/xianggao/blog/616385</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;设计模式之单例模式&quot;&gt;&lt;a href=&quot;#设计模式之单例模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之单例模式&quot;&gt;&lt;/a&gt;设计模式之单例模式&lt;/h2&gt;&lt;h3 id=&quot;模式介绍&quot;&gt;&lt;a href=&quot;#模式介绍&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.codesay.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://blog.codesay.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>架构设计原则概述</title>
    <link href="http://blog.codesay.top/2017/05/14/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E6%A6%82%E8%BF%B0/"/>
    <id>http://blog.codesay.top/2017/05/14/架构设计原则概述/</id>
    <published>2017-05-14T12:07:12.000Z</published>
    <updated>2018-05-19T02:40:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="架构设计原则概述"><a href="#架构设计原则概述" class="headerlink" title="架构设计原则概述"></a>架构设计原则概述</h2><h3 id="什么是架构设计"><a href="#什么是架构设计" class="headerlink" title="什么是架构设计"></a>什么是架构设计</h3><hr><ul><li>架构设计是连接业务需求与研发的纽带，业务的需求需要经过抽象的架构设计之后才能进行后续的研发工作。</li></ul><ul><li>架构设计的主要职责，将业务需求转换为规范的开发计划及文本，并产生项目的总体架构，指导整个团队完成这个计划。架构设计是软件设计过程的早期阶段，它把需求分析与设计流程连接在一起。</li></ul><h3 id="架构设计的主要产出"><a href="#架构设计的主要产出" class="headerlink" title="架构设计的主要产出"></a>架构设计的主要产出</h3><hr><ul><li>根据业务需求的理解，产生顶层的架构设计图</li></ul><blockquote><p>架构设计图，类比于建筑设计中的蓝图指导后续工作<br>架构设计图需要清晰表达架构师头脑中的清晰的设计目标</p></blockquote><ul><li>优秀的架构设计是随着技术进步，需求完善逐步演进而来。</li></ul><h3 id="架构设计的一些原则"><a href="#架构设计的一些原则" class="headerlink" title="架构设计的一些原则"></a>架构设计的一些原则</h3><hr><ul><li>软件项目的最终目标是要产生一个可维护的系统，架构设计就是要保障这种可维护性。</li></ul><blockquote><p>在架构设计中，着重需要考虑以下个方面：<br>安全性、可靠性、可维护性、易用性、可扩展性、市场因素</p></blockquote><ul><li>“高内聚，低耦合”是保障可维护性的重要途径，同时也是在顶层架构设计，系统模块设计，系统编码时应该遵守的原则。</li></ul><ul><li>在顶层架构设计中，通过以下方式来保证：</li></ul><p>1.异步解耦，降低整个系统复杂性<br>2.分布式服务提高内聚性与复用性<br>3.微服务设计降低耦合性<br>4.按功能划分子系统，降低子系统的复杂性，提高子系统可复用性<br>5.分层架构清晰，增加可维护性与可复用性<br>6.利用中间件技术，降低复杂性，提高复用性</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;架构设计原则概述&quot;&gt;&lt;a href=&quot;#架构设计原则概述&quot; class=&quot;headerlink&quot; title=&quot;架构设计原则概述&quot;&gt;&lt;/a&gt;架构设计原则概述&lt;/h2&gt;&lt;h3 id=&quot;什么是架构设计&quot;&gt;&lt;a href=&quot;#什么是架构设计&quot; class=&quot;header
      
    
    </summary>
    
      <category term="架构" scheme="http://blog.codesay.top/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="http://blog.codesay.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="设计" scheme="http://blog.codesay.top/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>关于代码质量的思考和重构</title>
    <link href="http://blog.codesay.top/2017/04/15/%E5%85%B3%E4%BA%8E%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E7%9A%84%E6%80%9D%E8%80%83%E5%92%8C%E9%87%8D%E6%9E%84/"/>
    <id>http://blog.codesay.top/2017/04/15/关于代码质量的思考和重构/</id>
    <published>2017-04-15T03:07:30.000Z</published>
    <updated>2018-05-19T02:40:04.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于代码质量的思考-amp-重构"><a href="#关于代码质量的思考-amp-重构" class="headerlink" title="关于代码质量的思考&amp;重构"></a>关于代码质量的思考&amp;重构</h3><h4 id="1-程序构成"><a href="#1-程序构成" class="headerlink" title="1. 程序构成"></a>1. 程序构成</h4><ul><li><p>程序=源码+文档</p>  <a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">文档更新是不及时的</span><br><span class="line">源码决定了最终的程序实现效果</span><br><span class="line">程序 ~ 大量源码的堆集</span><br></pre></td></tr></table></figure></li><li><p>程序的好坏是由一行行源码的好坏所决定的</p></li></ul><h4 id="2-研发的过程"><a href="#2-研发的过程" class="headerlink" title="2. 研发的过程"></a>2. 研发的过程</h4><p>研发 = 堆代码？</p><ul><li>问题的产生</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">赶进度，需求变更 ~ 代码逻辑混乱</span><br><span class="line">？解决</span><br></pre></td></tr></table></figure><ul><li>重构</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">不要写出自己所不能了理解的代码，</span><br><span class="line">那样只会加速系统的腐烂。</span><br><span class="line">程序员很有必要对自己所写代码进行思考和理解。</span><br><span class="line">            --《程序员修炼之道：从小工到专家》</span><br></pre></td></tr></table></figure><h4 id="3-高质量的代码"><a href="#3-高质量的代码" class="headerlink" title="3. 高质量的代码"></a>3. 高质量的代码</h4><ul><li>高质量 = 大量设计模式 + 高大上？</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">业务功能开发</span><br><span class="line"></span><br><span class="line">1. 代码逻辑的清晰性</span><br><span class="line">2. 代码整洁，可读</span><br></pre></td></tr></table></figure><h4 id="4-代码坏味道"><a href="#4-代码坏味道" class="headerlink" title="4. 代码坏味道"></a>4. 代码坏味道</h4><ul><li>代码坏味道</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果一段代码是不稳定或者有一些潜在问题的，</span><br><span class="line">那么代码往往会包含一些明显的痕迹。</span><br><span class="line">正如食物要腐坏之前，经常会发出一些异味一样。</span><br></pre></td></tr></table></figure><ul><li>《重构》，20种左右代码坏味道</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">列举最常见的</span><br><span class="line">1. Duplicated Code（重复代码）难维护</span><br><span class="line">2. Long Method （方法过长）难理解</span><br><span class="line">3. Large Class （类过大）难理解</span><br><span class="line">4. Long Parameter List （参数多）难用</span><br><span class="line">5. Comments （太多注释）代码难懂</span><br><span class="line">6. Switch Statements（switch语句/过多的if...else）</span><br><span class="line"></span><br><span class="line">参考解决</span><br><span class="line">https://sourcemaking.com/refactoring</span><br><span class="line">http://blog.csdn.net/windcao/article/details/25773219</span><br></pre></td></tr></table></figure><h4 id="5-CodeReview"><a href="#5-CodeReview" class="headerlink" title="5. CodeReview"></a>5. CodeReview</h4><ul><li>CodeReview</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码评审是指在软件开发过程中，通过对源代码进行系统性检查的过程。</span><br><span class="line">通常的目的是查找系统缺陷，保证软件总体质量和提高开发者自身水平。</span><br></pre></td></tr></table></figure><ul><li>开展形式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">原则</span><br><span class="line">分阶段实施，参考代码坏味道逐步改善</span><br><span class="line"></span><br><span class="line">插件：FindBugs, PMD</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;关于代码质量的思考-amp-重构&quot;&gt;&lt;a href=&quot;#关于代码质量的思考-amp-重构&quot; class=&quot;headerlink&quot; title=&quot;关于代码质量的思考&amp;amp;重构&quot;&gt;&lt;/a&gt;关于代码质量的思考&amp;amp;重构&lt;/h3&gt;&lt;h4 id=&quot;1-程序构成&quot;&gt;&lt;a href=&quot;#1-程序构成&quot; class=&quot;headerlink&quot; title=&quot;1. 程序构成&quot;&gt;&lt;/a&gt;1. 程序构成&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;程序=源码+文档&lt;/p&gt;
    
    </summary>
    
      <category term="重构" scheme="http://blog.codesay.top/categories/%E9%87%8D%E6%9E%84/"/>
    
    
      <category term="重构" scheme="http://blog.codesay.top/tags/%E9%87%8D%E6%9E%84/"/>
    
      <category term="代码质量" scheme="http://blog.codesay.top/tags/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>redis集群笔记</title>
    <link href="http://blog.codesay.top/2017/03/15/redis%E9%9B%86%E7%BE%A4%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/"/>
    <id>http://blog.codesay.top/2017/03/15/redis集群相关概念/</id>
    <published>2017-03-15T03:07:30.000Z</published>
    <updated>2018-05-19T02:40:04.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="redis集群笔记"><a href="#redis集群笔记" class="headerlink" title="redis集群笔记"></a>redis集群笔记</h3><h4 id="普通hash"><a href="#普通hash" class="headerlink" title="普通hash"></a>普通hash</h4><a id="more"></a><blockquote><p>存在问题：</p><ol><li>节点数量变化，带来几乎所有数据的hash值变更与迁移</li><li>业务发展必然需要扩容</li></ol></blockquote><h4 id="一致性hash"><a href="#一致性hash" class="headerlink" title="一致性hash"></a>一致性hash</h4><ol><li>hash空间大，形成一个环路0~~2^32-1</li><li>把机器通过hash映射到环上</li><li>把数据的key通过相同的算映射到环上</li><li>按顺时针将数据存储在最近的节点上<blockquote><p>优点：</p></blockquote></li><li>新增节点只影响左边及前一个节点之间的数据</li><li>删除节点也只影响左边及前一个节点之间的数据<blockquote><p>缺点：</p></blockquote></li><li>数据分布不均，新加的节点数据少</li></ol><p>解决方法，虚拟节点</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;redis集群笔记&quot;&gt;&lt;a href=&quot;#redis集群笔记&quot; class=&quot;headerlink&quot; title=&quot;redis集群笔记&quot;&gt;&lt;/a&gt;redis集群笔记&lt;/h3&gt;&lt;h4 id=&quot;普通hash&quot;&gt;&lt;a href=&quot;#普通hash&quot; class=&quot;headerlink&quot; title=&quot;普通hash&quot;&gt;&lt;/a&gt;普通hash&lt;/h4&gt;
    
    </summary>
    
      <category term="缓存" scheme="http://blog.codesay.top/categories/%E7%BC%93%E5%AD%98/"/>
    
    
      <category term="redis" scheme="http://blog.codesay.top/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>(转载)搭建 Hexo 博客--增强篇</title>
    <link href="http://blog.codesay.top/2017/02/28/Hexo-Intensify/"/>
    <id>http://blog.codesay.top/2017/02/28/Hexo-Intensify/</id>
    <published>2017-02-28T10:10:27.000Z</published>
    <updated>2018-05-19T02:40:04.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="主题优化"><a href="#主题优化" class="headerlink" title="主题优化"></a>主题优化</h2><h3 id="主题配置介绍"><a href="#主题配置介绍" class="headerlink" title="主题配置介绍"></a>主题配置介绍</h3><p>我这里只讲自己在使用的 yelle 主题，你可以参考下，可能还有一些改动我后续会自己在慢慢改，但是大体基本也就这样了。</p><p>从中我们也可以看出，对于主题来讲，大部分可以配置的地方其实都是在这里的，所以对于主题的使用者来讲，懂这里很重要。</p><ul><li>基本上主题的配置文件都是有内容改，但是下面这几点我觉得特别重要：</li><li><code>duoshuo</code>，如果你是打算采用多说评论系统的话，你需要设置这里，但是我个人对多说没好印象</li><li><code>youyan</code>，有言也是国内实用比较多的评论系统之一，个人感觉相对比较稳定</li><li><code>open_in_new</code>，我个人觉得这个东西就应该是 true，不是用新标签的都是坏人</li><li><code>baidu_tongji</code>，我个人使用的是百度统计，具体百度统计的使用可以查看百度统计官网：<a href="http://tongji.baidu.com" target="_blank" rel="external">http://tongji.baidu.com</a></li></ul><h3 id="我的-yelle-主题配置"><a href="#我的-yelle-主题配置" class="headerlink" title="我的 yelle 主题配置"></a>我的 yelle 主题配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &gt;&gt;&gt; Basic Setup | 基础设置 &lt;&lt;&lt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Header | 主菜单</span></span><br><span class="line"><span class="comment">## About Page: `hexo new page about`</span></span><br><span class="line"><span class="comment">## Tags Cloud Page: `hexo new page tags`</span></span><br><span class="line">menu:</span><br><span class="line">  主页: /</span><br><span class="line">  关于我: /about/</span><br><span class="line">  标签云: /tags/</span><br><span class="line">  所有文章: /archives/</span><br><span class="line">  IntelliJ IDEA: /tags/IntelliJ IDEA</span><br><span class="line"></span><br><span class="line"><span class="comment"># Link to your avatar | 填写头像地址</span></span><br><span class="line">avatar: /img/avatar.png</span><br><span class="line"></span><br><span class="line"><span class="comment"># Small icon of Your site | 站点小图标地址</span></span><br><span class="line">favicon: /favicon.png</span><br><span class="line"></span><br><span class="line"><span class="comment"># If your site' url is 'http://yoursite.com/blog', set root_url as '/blog/'</span></span><br><span class="line"><span class="comment"># 网站若存放在子目录，请按上面格式填写</span></span><br><span class="line"><span class="comment"># https://hexo.io/docs/configuration.html#URL</span></span><br><span class="line">root_url: </span><br><span class="line"></span><br><span class="line"><span class="comment"># Social info. Bar | 社交信息展示</span></span><br><span class="line"><span class="comment">## Keep "mailto:" in Email | 设置 Email 时保留 "mailto:"</span></span><br><span class="line"><span class="comment">## Encrypt email 加密邮件地址 http://ctrlq.org/encode/</span></span><br><span class="line"><span class="comment">## RSS requires a plugin to take effect | 使用 RSS 需先安装对应插件</span></span><br><span class="line"><span class="comment">## https://github.com/hexojs/hexo-generator-feed</span></span><br><span class="line"></span><br><span class="line">subnav:</span><br><span class="line">  Email: <span class="string">"mailto:judas.n@qq.com"</span></span><br><span class="line">  <span class="comment">#新浪微博: "sina weibo"</span></span><br><span class="line">  GitHub: <span class="string">"https://github.com/judasn/IntelliJ-IDEA-Tutorial"</span></span><br><span class="line">  RSS: <span class="string">"/atom.xml"</span></span><br><span class="line">  <span class="comment">#V2EX: "#"</span></span><br><span class="line">  <span class="comment">#知乎: "zhihu"</span></span><br><span class="line">  <span class="comment">#豆瓣: "douban"</span></span><br><span class="line">  <span class="comment">#简书: "jianshu"</span></span><br><span class="line">  <span class="comment">#SegmentFault: ""</span></span><br><span class="line">  <span class="comment">#网易云音乐: "netease"</span></span><br><span class="line">  <span class="comment">#虾米音乐: "xiami"</span></span><br><span class="line">  <span class="comment">#Facebook: "#"</span></span><br><span class="line">  <span class="comment">#Google: "#"</span></span><br><span class="line">  <span class="comment">#Twitter: "#"</span></span><br><span class="line">  <span class="comment">#LinkedIn: "#"</span></span><br><span class="line">  <span class="comment">#QQ: "#"</span></span><br><span class="line">  <span class="comment">#微信: "Wechat"</span></span><br><span class="line">  <span class="comment">#PayPal: "#"</span></span><br><span class="line">  <span class="comment">#StackOverflow: "#"</span></span><br><span class="line">  <span class="comment">#Instagram: "#"</span></span><br><span class="line">  <span class="comment">#Flickr: "#"</span></span><br><span class="line">  <span class="comment">#reddit: ""</span></span><br><span class="line">  <span class="comment">#Medium: ""</span></span><br><span class="line">  <span class="comment">#TiddlyWiki: ""</span></span><br><span class="line">  <span class="comment">#Tumblr: ""</span></span><br><span class="line">  <span class="comment">#_500px: ""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; Conments 评论系统 &lt;&lt;&lt;</span></span><br><span class="line"><span class="comment"># Chose ONE as your comment system and keep others disable.</span></span><br><span class="line"><span class="comment"># 选一个作为网站评论系统，其他保持禁用。</span></span><br><span class="line"></span><br><span class="line">disqus: </span><br><span class="line">  <span class="comment">#on: true</span></span><br><span class="line">  shortname: </span><br><span class="line">  <span class="comment"># https://help.disqus.com/customer/en/portal/articles/466208-what-s-a-shortname-</span></span><br><span class="line">  <span class="comment"># It is unnecessary to enable disqus here if </span></span><br><span class="line">  <span class="comment"># you have set "disqus_shortname" in your site's "_config.yml" </span></span><br><span class="line"></span><br><span class="line">duoshuo: </span><br><span class="line">  <span class="comment">#on: true</span></span><br><span class="line">  domain: </span><br><span class="line">  <span class="comment"># 是否开启多说评论，http://duoshuo.com/create-site/</span></span><br><span class="line">  <span class="comment"># 使用上面网址登陆你的多说，然后创建站点，在 domain 中填入你设定的域名前半部分</span></span><br><span class="line">  <span class="comment"># http://&lt;要填的部分&gt;.duoshuo.com (domain只填上&lt;&gt;里的内容，不要填整个网址)</span></span><br><span class="line"></span><br><span class="line">youyan:</span><br><span class="line">  on: <span class="literal">true</span></span><br><span class="line">  id: 1738968</span><br><span class="line">  <span class="comment"># 是否开启友言评论，http://www.uyan.cc/index.php</span></span><br><span class="line">  <span class="comment"># id 中填写你的友言用户数字ID，注册后进入后台管理即可查看</span></span><br><span class="line">  <span class="comment"># 友言服务在 Web 环境下运行，普通本地环境无法查看，请部署后在线上测试。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; Style Customisation 样式自定义 &lt;&lt;&lt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Background | 背景</span></span><br><span class="line"><span class="comment">## "5": show images form bg-1.jpg to bg-5.jpg in `/yelee/source/background/`</span></span><br><span class="line"><span class="comment">## "5": 显示`/yelee/source/background/`文件夹中 bg-1.jpg 到 bg-5.jpg 这5张图片</span></span><br><span class="line"><span class="comment">## "0": white-gray background | 淳朴灰白背景</span></span><br><span class="line">background_image: 0</span><br><span class="line"></span><br><span class="line">highlight_style:</span><br><span class="line">  on: <span class="literal">true</span></span><br><span class="line">  inline_code: 3  <span class="comment"># Value: 0 - 9 可选，3还不错</span></span><br><span class="line">  code_block: 2  <span class="comment"># Value: 0 - 4 </span></span><br><span class="line">  <span class="comment"># Set inline_code to style highlight text</span></span><br><span class="line">  <span class="comment"># Chose a highlight theme for code block</span></span><br><span class="line">  <span class="comment"># 通过 inline_code 切换内置文本高亮样式</span></span><br><span class="line">  <span class="comment"># 通过 code_block 切换内置代码高亮配色主题</span></span><br><span class="line"></span><br><span class="line">blockquote_style:</span><br><span class="line">  on: <span class="literal">true</span></span><br><span class="line">  blockquote: 3  <span class="comment"># Value: 0 - 7 可选</span></span><br><span class="line">  <span class="comment"># 自定义文章「引用部分」的样式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 左边栏宽度 px</span></span><br><span class="line">left_col_width: 330</span><br><span class="line"></span><br><span class="line"><span class="comment"># Copyright info. of post | 文末版权信息</span></span><br><span class="line">copyright: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Table of contents | 文章目录</span></span><br><span class="line">toc: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 目录中标题不换行</span></span><br><span class="line"><span class="comment"># Keep TOC title on the same line | </span></span><br><span class="line">toc_nowrap: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义"阅读全文"链接按钮的显示文字</span></span><br><span class="line"><span class="comment"># Customize the text on excerpt link</span></span><br><span class="line">excerpt_link: more</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否显示边栏中的搜索框（仅样式，未添加搜索功能）</span></span><br><span class="line"><span class="comment"># Search Box in left column</span></span><br><span class="line">search_box: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启主页及加载头像时的动画效果</span></span><br><span class="line"><span class="comment"># Animation in Homepage and Loading avatar</span></span><br><span class="line">animate: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load jQuery UI to style tooltips</span></span><br><span class="line"><span class="comment"># 工具提示框样式美化</span></span><br><span class="line">jquery_ui: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; Small features | 小功能设置 &lt;&lt;&lt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启边栏多标签切换</span></span><br><span class="line"><span class="comment"># Birdhouse button in left column</span></span><br><span class="line">tagcloud: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Blogroll, Link exchange | 友情链接</span></span><br><span class="line">friends:</span><br><span class="line">  YouMeek: http://www.YouMeek.com</span><br><span class="line">  YouMeek导航: http://i.YouMeek.com</span><br><span class="line">  GitHub: https://github.com/</span><br><span class="line">  IntelliJ IDEA: http://www.jetbrains.com/idea/</span><br><span class="line"><span class="comment">#friends: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#是否开启“关于我”。</span></span><br><span class="line">aboutme: 此地只专注于技术</span><br><span class="line"><span class="comment">#aboutme: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否在新窗口打开链接</span></span><br><span class="line"><span class="comment"># Open ALL link in a new tab</span></span><br><span class="line">open_in_new: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Customize feed link 自定义订阅地址</span></span><br><span class="line">rss: /atom.xml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; Vendors | 第三方工具 &amp; 服务 &lt;&lt;&lt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># images viewer | 图片浏览器</span></span><br><span class="line"><span class="comment">## http://www.fancyapps.com/fancybox/</span></span><br><span class="line">fancybox: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Display Math(LaTeX, MathML...) | 数学公式支持</span></span><br><span class="line"><span class="comment">## https://www.mathjax.org/</span></span><br><span class="line">mathjax: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Socail Share | 是否开启分享</span></span><br><span class="line">share: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 百度、谷歌站长验证。填写 HTML 标签 content</span></span><br><span class="line"><span class="comment"># Site Verification for Google and Baidu. HTML label content.</span></span><br><span class="line">baidu_site: </span><br><span class="line">google_site: </span><br><span class="line"></span><br><span class="line"><span class="comment"># Fill in Google Analytics tracking ID, #e.g. UA-XXXXX-X</span></span><br><span class="line">google_analytics: </span><br><span class="line"></span><br><span class="line"><span class="comment"># 百度统计 http://sitecenter.baidu.com/sc-web/</span></span><br><span class="line"><span class="comment"># 查看代码，填入 //hm.baidu.com/hm.js? 之后的内容</span></span><br><span class="line">baidu_tongji: b68dade9d355a0b3d875d0ffbbe1f212</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不蒜子网站计数设置</span></span><br><span class="line"><span class="comment"># http://ibruce.info/2015/04/04/busuanzi/</span></span><br><span class="line">visit_counter:</span><br><span class="line">  on: <span class="literal">true</span></span><br><span class="line">  site_visit: 本站到访数</span><br><span class="line">  page_visit: 本页阅读量</span><br><span class="line"></span><br><span class="line"><span class="comment"># GitHub Repo Widget</span></span><br><span class="line"><span class="comment"># https://github.com/hustcc/GitHub-Repo-Widget.js</span></span><br><span class="line">github_widget: <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="常用页面添加"><a href="#常用页面添加" class="headerlink" title="常用页面添加"></a>常用页面添加</h2><h3 id="404、关于我、标签页"><a href="#404、关于我、标签页" class="headerlink" title="404、关于我、标签页"></a>404、关于我、标签页</h3><ul><li>还是以上一篇文章我们讲解的项目根目录上：E:\git_work_space\hexo，在该目录启动 Git Bash：</li><li>新增一个 404 页面：<code>hexo new page 404</code></li><li>新增一个 about 页面：<code>hexo new page about</code></li><li>新增一个 tag 标签云页面：<code>hexo new page tags</code></li><li>新增一个 robot.txt 文件，把该文件放在：E:\git_work_space\hexo\source 目录下，如果你没有该文件可以到我的项目上找：<a href="https://github.com/judasn/judasn.github.io" target="_blank" rel="external">https://github.com/judasn/judasn.github.io</a></li><li>robot 文件内容：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">User-Agent: *</span><br><span class="line">Allow: /</span><br><span class="line">Disallow: /background</span><br><span class="line">Disallow: /css</span><br><span class="line">Disallow: /fancybox</span><br><span class="line">Disallow: /font-awesome</span><br><span class="line">Disallow: /img</span><br><span class="line">Disallow: /js</span><br><span class="line">Sitemap: http://code.youmeek.com/sitemap.xml</span><br><span class="line">Sitemap: http://code.youmeek.com/baidusitemap.xml</span><br></pre></td></tr></table></figure><h3 id="置顶文章方法"><a href="#置顶文章方法" class="headerlink" title="置顶文章方法"></a>置顶文章方法</h3><ul><li>参考：<a href="http://www.netcan666.com/2015/11/22/%E8%A7%A3%E5%86%B3Hexo%E7%BD%AE%E9%A1%B6%E9%97%AE%E9%A2%98/" target="_blank" rel="external">解决Hexo置顶问题</a></li><li>编辑这个文件：<code>node_modules/hexo-generator-index/lib/generator.js</code></li><li>覆盖原文件内容，采用下面内容：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line"></span><br><span class="line">var pagination = require(<span class="string">'hexo-pagination'</span>);</span><br><span class="line"></span><br><span class="line">module.exports = <span class="keyword">function</span>(locals)&#123;</span><br><span class="line">  var config = this.config;</span><br><span class="line">  var posts = locals.posts;</span><br><span class="line"></span><br><span class="line">    posts.data = posts.data.sort(<span class="keyword">function</span>(a, b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义</span><br><span class="line">            <span class="keyword">if</span>(a.top == b.top) <span class="built_in">return</span> b.date - a.date; // 若top值一样则按照文章日期降序排</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">return</span> b.top - a.top; // 否则按照top值降序排</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span><br><span class="line">            <span class="built_in">return</span> -1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">            <span class="built_in">return</span> 1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">return</span> b.date - a.date; // 都没定义按照文章日期降序排</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  var paginationDir = config.pagination_dir || <span class="string">'page'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">return</span> pagination(<span class="string">''</span>, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</span><br><span class="line">    format: paginationDir + <span class="string">'/%d/'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>然后在文章头部的：Front-matter 位置加上一个：<code>top: 1000</code> 的内容。数值越大，越靠前</li></ul><h2 id="添加一些不希望被渲染的文件到-hexo"><a href="#添加一些不希望被渲染的文件到-hexo" class="headerlink" title="添加一些不希望被渲染的文件到 hexo"></a>添加一些不希望被渲染的文件到 hexo</h2><ul><li><p>因为我们使用的是 Github 项目做空间，所以一般项目我们都要放一个 README.md 文件，而我们希望这个文件不被 hexo 渲染成 HTML 文件，我们需要这样做：</p><ul><li>把 README.md 放在这个目录下：<code>hexo\source\README.md</code></li><li>编辑这个配置文件：<code>hexo\_config.yml</code>，找到这个关键字：<code>skip_render</code>，然后这样写：<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">skip_render: </span><br><span class="line">     - README.md</span><br></pre></td></tr></table></figure></li></ul></li><li><p>有时候我们需要排除一整个目录，道理跟上面一样，比如你现在访问：<a href="http://code.YouMeek.com/i" target="_blank" rel="external">http://code.YouMeek.com/i</a>，你发现会跑到我的一个备份导航中，而我是通过这样配置来实现的：</p><ul><li>这里的 <code>i</code> 是我的目录名称，因为我的真正导航地址是：<a href="http://i.YouMeek.com" target="_blank" rel="external">http://i.YouMeek.com</a>，所以取这样的目录名字方便记忆。</li><li>而 <code>i/**</code> 这里的后缀的两个星号表示这个目录下包括子目录，其所有文件都被忽略渲染。</li><li>对于一些 HTML 和 CSS、JS 这类也要注意，hexo 有一套自己的渲染方式，比如可能会对你的 JS 做一些特殊处理，所以可能会让你的 JS 失效，所以最好按我这种方式来排除掉。<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">skip_render: </span><br><span class="line">  - README.md</span><br><span class="line">  - i/**</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h2><h3 id="插件的基本使用命令"><a href="#插件的基本使用命令" class="headerlink" title="插件的基本使用命令"></a>插件的基本使用命令</h3><ul><li>插件官网：<a href="https://hexo.io/plugins/" target="_blank" rel="external">https://hexo.io/plugins/</a></li><li>安装插件：<code>npm install 插件名 --save</code></li><li>卸载插件：<code>npm uninstall 插件名</code></li><li>更新插件和博客框架（需要在 E:\git_work_space\hexo 目录下）：<code>npm update</code><ul><li>它实质上是通过项目根目录下 package.json 文件更新各大组件</li></ul></li></ul><h3 id="必备插件"><a href="#必备插件" class="headerlink" title="必备插件"></a>必备插件</h3><ul><li>支持RSS：<code>npm install hexo-generator-feed --save</code></li><li>生成站点地图：<code>npm install hexo-generator-sitemap --save</code></li><li>生成百度站点地图：<code>npm install hexo-generator-baidu-sitemap --save</code></li><li>HTML 压缩：<code>npm install hexo-html-minifier --save</code></li><li>JavaScript 压缩：<code>npm install hexo-uglify --save</code></li><li>CSS 压缩插件：<code>npm install hexo-clean-css --save</code></li><li>SEO优化：<code>npm install hexo-generator-seo-friendly-sitemap --save</code></li><li>搜索支持，需要主题有对应的设置：<code>npm install hexo-generator-search --save</code></li></ul><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><ul><li>真心希望这是 Hexo 最后一篇，因为我们只是要安心写东西而已，不需要太多折腾。</li></ul><ul><li>转自：<a href="http://code.youmeek.com/2016/02/29/2016/02/Hexo-Intensify/" target="_blank" rel="external">http://code.youmeek.com/2016/02/29/2016/02/Hexo-Intensify/</a></li></ul>]]></content>
    
    <summary type="html">
    
      本文将讲解 Hexo 博客的常用插件、站点 SEO 等内容！
    
    </summary>
    
      <category term="Hexo" scheme="http://blog.codesay.top/categories/Hexo/"/>
    
      <category term="转载" scheme="http://blog.codesay.top/categories/Hexo/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="Hexo" scheme="http://blog.codesay.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>(转载)使用 Github 空间搭建 Hexo 技术博客--安装篇（基于 IntelliJ IDEA）</title>
    <link href="http://blog.codesay.top/2017/02/28/Hexo/"/>
    <id>http://blog.codesay.top/2017/02/28/Hexo/</id>
    <published>2017-02-28T09:58:27.000Z</published>
    <updated>2018-05-19T03:04:17.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="部署前介绍"><a href="#部署前介绍" class="headerlink" title="部署前介绍"></a>部署前介绍</h2><h3 id="Hexo-是什么"><a href="#Hexo-是什么" class="headerlink" title="Hexo 是什么"></a>Hexo 是什么</h3><ul><li>Hexo 的中文官网：<a href="http://hexo.io/zh-cn/" target="_blank" rel="external">http://hexo.io/zh-cn/</a></li><li>作者 Tommy Chen：<a href="https://zespia.tw/" target="_blank" rel="external">https://zespia.tw/</a></li><li>在我的理解里面：Hexo 是一个基于 Node.js 快速、简洁且高效的博客框架，可以将 Markdown 文件快速的生成静态网页，托管在 GitHub Pages 上。</li><li>而官网自己是这样说的：</li></ul><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><h3 id="为什么要用-Hexo"><a href="#为什么要用-Hexo" class="headerlink" title="为什么要用 Hexo"></a>为什么要用 Hexo</h3><ul><li>我：因为其他博客框架太烂了</li><li>Tommy Chen：<a href="https://zespia.tw/blog/2012/10/11/hexo-debut/" target="_blank" rel="external">https://zespia.tw/blog/2012/10/11/hexo-debut/</a></li></ul><h3 id="适合人群"><a href="#适合人群" class="headerlink" title="适合人群"></a>适合人群</h3><ul><li>有 IntelliJ IDEA 基础的程序员（或者你使用的是 JetBrains 家的其他产品）</li><li>只想搭建一个技术博客的人（真心别搞太多，你没那么多精力）</li></ul><h3 id="文章要求"><a href="#文章要求" class="headerlink" title="文章要求"></a>文章要求</h3><ul><li>如果是 Git，Node.js 的新人，则这篇文章不要间断操作，要一气呵成，不然可能会遇到各种问题。</li></ul><h3 id="本文环境"><a href="#本文环境" class="headerlink" title="本文环境"></a>本文环境</h3><ul><li>系统：<ul><li>Windows 10（64 位）</li></ul></li><li>软件：<ul><li>git：<strong>2.7.0.2-64-bit</strong></li><li>IntelliJ IDEA：<strong>15.0.4</strong></li><li>node.js：<strong>v5.7.0-64-bit Stable</strong></li></ul></li><li>账号：<ul><li>Github：<a href="https://github.com/" target="_blank" rel="external">https://github.com/</a></li><li>DNSPOD：<a href="https://www.dnspod.cn/" target="_blank" rel="external">https://www.dnspod.cn/</a></li></ul></li></ul><h3 id="搭建所需软件"><a href="#搭建所需软件" class="headerlink" title="搭建所需软件"></a>搭建所需软件</h3><ul><li>各个软件官网：<ul><li>git：<a href="http://git-scm.com/" target="_blank" rel="external">http://git-scm.com/</a></li><li>IntelliJ IDEA：<a href="https://www.jetbrains.com/idea/" target="_blank" rel="external">https://www.jetbrains.com/idea/</a></li><li>node.js：<a href="http://nodejs.org/" target="_blank" rel="external">http://nodejs.org/</a></li></ul></li><li>所需软件集合：<ul><li>上面三者集合包：<a href="http://pan.baidu.com/s/1bvbo8e" target="_blank" rel="external">http://pan.baidu.com/s/1bvbo8e</a></li></ul></li></ul><h3 id="文章前提"><a href="#文章前提" class="headerlink" title="文章前提"></a>文章前提</h3><ul><li>如果你对上面要求的软件一个都不了解的话，建议你先看如下内容（只是让你们先了解下，当时别照着文章内容做）：<ul><li><a href="http://www.jianshu.com/p/05289a4bc8b2" target="_blank" rel="external">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></li><li><a href="http://www.jianshu.com/p/858ecf233db9" target="_blank" rel="external">通过Hexo在Github上搭建博客教程</a></li><li><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">hexo你的博客</a></li><li><a href="http://www.jianshu.com/p/701b1095da11" target="_blank" rel="external">手把手教你建github技术博客</a></li><li><a href="http://www.jianshu.com/p/05289a4bc8b2" target="_blank" rel="external">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></li><li><a href="http://www.jianshu.com/p/e858a90d0a17" target="_blank" rel="external">windows下搭建hexo博客并将其部署到GitCafe终极教程</a></li><li><a href="http://www.jianshu.com/p/db7e64d86067" target="_blank" rel="external">使用Hexo搭建博客（三），博客配置、主题和写作</a></li><li><a href="http://www.jianshu.com/p/e7413116e9d4" target="_blank" rel="external">Hexo搭建WiKi</a></li><li><a href="https://www.zhihu.com/question/28058973" target="_blank" rel="external">怎么用hexo上传一个README.md到github?</a></li></ul></li></ul><h3 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h3><ul><li>如果你一开始就打算要绑定域名，则下面教程中所有可以填写域名的地方你都填写上你要绑定的域名，如果你没独立域名，那就使用 Github 默认给你的：XXXXXX.github.io 域名即可。</li></ul><hr><h2 id="部署开始"><a href="#部署开始" class="headerlink" title="部署开始"></a>部署开始</h2><h3 id="git-安装"><a href="#git-安装" class="headerlink" title="git 安装"></a>git 安装</h3><ul><li>双击运行 <strong>Git-2.7.0.2-64-bit.exe</strong>，接下来一律下一步，不需要多余的选择，假设你安装的目录位置跟我一样：C:\Program Files\Git</li><li>打开 Git Bash（路径：C:\Program Files\Git\git-bash.exe），输入：<code>git --version</code><ul><li>如下图，如果出现：<strong>git version 2.7.0.windows.2</strong>，这表示安装成功</li><li><img src="http://img.youmeek.com/2016/hexo-start-a-1.jpg" alt="验证 git 安装"></li></ul></li></ul><h3 id="Node-js-安装"><a href="#Node-js-安装" class="headerlink" title="Node.js 安装"></a>Node.js 安装</h3><ul><li>双击运行 <strong>node-v5.7.0-x64.msi</strong>，接下来一律下一步，不需要多余的选择。</li><li>安装完之后，打开 Git Bash，输入：<code>npm -v</code><ul><li>如下图，如果出现：<strong>3.6.0</strong>，则表示 Node.js 安装成功。如果你没有显示这个信息，我怀疑你需要重启电脑试试看，因为我在给我弟讲解这一步的时候发现有这个问题。</li><li><img src="http://img.youmeek.com/2016/hexo-start-a-2.jpg" alt="验证 node.js 安装"></li></ul></li></ul><h3 id="Node-js-源设置"><a href="#Node-js-源设置" class="headerlink" title="Node.js 源设置"></a>Node.js 源设置</h3><ul><li>在安装 Hexo 之前，先说一下 Node.js 的源，Node.js 官方源默认是：<a href="http://registry.npmjs.org" target="_blank" rel="external">http://registry.npmjs.org</a>，但是由于在国外，说不定你使用的时候就抽风无法下载任何软件。所以我们决定暂时使用淘宝提供的源，淘宝源官网：<a href="http://npm.taobao.org/" target="_blank" rel="external">http://npm.taobao.org/</a></li><li>在 Git Bash 中我们执行下面这一句（这是一整句的）：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> cnpm=<span class="string">"npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="string">--cache=<span class="variable">$HOME</span>/.npm/.cache/cnpm \</span></span><br><span class="line"><span class="string">--disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="string">--userconfig=<span class="variable">$HOME</span>/.cnpmrc"</span></span><br></pre></td></tr></table></figure><ul><li>现在验证下是否可以使用淘宝的 cnpm 命令：<code>cnpm info express</code><ul><li>如果能输出一大堆介绍，则说明成功了，以后每次要使用淘宝的源都需要这样来。现在除了默认的 <strong>npm</strong>，还多了一个 <strong>cnpm</strong> 可以使用，我们下面有关安装的讲解内容也都是基于此临时命令。</li><li>如果输出：bash: cnpm: command not found，则表示没成功，需要你在排查下</li><li>需要强调的是：<strong>cnpm</strong> 不是永久性命令，只是此时这个界面窗口下的临时命令，关掉窗口就没效果了。</li></ul></li></ul><h3 id="安装-Hexo-框架"><a href="#安装-Hexo-框架" class="headerlink" title="安装 Hexo 框架"></a>安装 Hexo 框架</h3><ul><li>安装 Hexo（注意，现在是 cnpm 开头了，不是 npm 了）：<code>cnpm install -g hexo-cli</code><ul><li>安装时间不一定很快，有可能需要等 3 ~ 5 分钟。</li><li>安装过程中有 WARN 警告也没关系的，不用在意这些 WARN，继续等它安装完成。因为国内的网络问题，有时候安装异常慢花了大半个小时都没效果，那就 Ctrl + C 停掉这次命令，重新再执行一次。</li></ul></li></ul><h3 id="创建-Hexo-项目"><a href="#创建-Hexo-项目" class="headerlink" title="创建 Hexo 项目"></a>创建 Hexo 项目</h3><ul><li>现在假设我要创建一个名为 hexo 的项目，项目目录就放在：E:\git_work_space 目录下，所以我们在 E:\git_work_space 目录下创建一个 hexo 目录。现在这个项目的全路径是：E:\git_work_space\hexo</li><li>打开 Git Bash：<ul><li>进入该目录：<code>cd e:/git_work_space/hexo</code></li><li>然后执行：<code>hexo init</code>，这个时间也会比较长，也有可能要等几分钟，有显示 WARN 也不用管</li><li>最后执行：<code>cnpm install</code>，有显示 WARN 也不用管</li><li>安装完成之后，E:\git_work_space\hexo 目录结构是这样的：<ul><li><img src="http://img.youmeek.com/2016/hexo-start-b-1.jpg" alt="安装 hexo 后的目录结构"></li></ul></li><li>现在我们启动 hexo 本地服务，看下默认的博客是怎样的，命令：<code>hexo server</code></li><li>现在用浏览器访问：<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>，效果如下图<ul><li><img src="http://img.youmeek.com/2016/hexo-start-b-2.jpg" alt="默认模板效果"></li></ul></li><li>如果要停止 hexo 服务：在 Git Bash 下按 <code>Ctrl + C</code> 即可</li></ul></li></ul><h3 id="选用其他主题"><a href="#选用其他主题" class="headerlink" title="选用其他主题"></a>选用其他主题</h3><ul><li>由于默认主题太大众了，所以现在我们换个主题。</li><li>你可以去这里找主题：<ul><li>hexo-theme：<a href="https://hexo.io/themes/" target="_blank" rel="external">https://hexo.io/themes/</a></li><li>hexo-github-theme-list：<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">https://github.com/hexojs/hexo/wiki/Themes</a></li><li>有那些好看的hexo主题？：<a href="http://www.zhihu.com/question/24422335" target="_blank" rel="external">http://www.zhihu.com/question/24422335</a></li></ul></li><li>我这里选择的 <strong>yelee</strong>：<a href="https://github.com/MOxFIVE/hexo-theme-yelee" target="_blank" rel="external">https://github.com/MOxFIVE/hexo-theme-yelee</a><ul><li>原因是能最大化衬托出：目录、文章内容、代码块。因为我对这个博客的定位就是用来放技术类内容，所以不会让它太杂或是太花。只是目前这个颜色偏浅，后续还需要调整。</li></ul></li><li>现在假设你跟我要用的模板是一样：<ul><li>还是让 Git Bash 保持在 E:\git_work_space\hexo 目录下，然后输入命令：<code>git clone https://github.com/MOxFIVE/hexo-theme-yelee.git themes/yelee</code></li><li>这样就在 E:\git_work_space\hexo\themes 目录下生成了一个 yelle 文件夹，里面有我们刚刚 clone 下来的主题内容。</li><li>如果以后你不自己修改这个主题的话，可以考虑经常更新下作者的更新内容：<ul><li><code>cd e:/git_work_space/hexo/themes/yelee</code></li><li><code>git pull origin master</code></li></ul></li></ul></li><li>下载好主题文件之后，我们现在要修改 E:\git_work_space\hexo 目录下的项目配置文件：<strong>_config.yml</strong>，把对应的主题目录名改下，编辑如下图。<ul><li><img src="http://img.youmeek.com/2016/hexo-start-b-3.jpg" alt="修改主题目录"></li></ul></li><li>更改主题目录名后，我们还要重新生成主题静态内容：<ul><li>继续在 Git Bash 中输入命令：<ul><li>重新生成静态博客的所有内容：<code>hexo generate</code></li><li>重启 hexo 本地服务：<code>hexo server</code></li><li>重新访问：<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>，效果如下图</li><li><img src="http://img.youmeek.com/2016/hexo-start-b-4.jpg" alt="新主题效果"></li></ul></li></ul></li></ul><h3 id="创建-Github-pages-并-SSH-授权"><a href="#创建-Github-pages-并-SSH-授权" class="headerlink" title="创建 Github pages 并 SSH 授权"></a>创建 Github pages 并 SSH 授权</h3><ul><li>现在假设你已经有一个 Gtihub 账号，你还需要一个特别的仓库，特别在仓库名就是你的 Github 账号登录名，比如我的用户名是：judasn，那我要创建的仓库名字完整滴填写是：judasn.github.io，具体效果如下图。<ul><li><img src="http://img.youmeek.com/2016/hexo-start-c-1.jpg" alt="创建 github pages"></li></ul></li><li>创建好仓库之后，要本地生成 SSH 秘钥，方便电脑上的 git 软件好提交内容到 Github 上<ul><li>在 Git Bash 中，输入：<code>ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;</code>，然后回车，回车，再回车，一共 3 次回车，具体含义自己 Google。</li><li>比如我的：<code>ssh-keygen -t rsa -C &quot;jn3.141592654@gmail.com&quot;</code>，生成后效果如下图：</li><li><img src="http://img.youmeek.com/2016/hexo-start-c-2.jpg" alt="生成 ssh 密钥"></li><li>此时，生成密钥后，在你电脑目录：C:\Users\你的计算机用户名\.ssh 下，会生成两个文件：<ul><li>私钥：<strong>id_rsa</strong></li><li>公钥：<strong>id_rsa.pub</strong></li><li>如果生成的不是这样的文件，那删除掉这两个生成的，重新执行上面的命令，让它再一次生成。</li></ul></li><li>现在用记事本打开 id_rsa.pub，复制文件中的所有内容。<ul><li>访问：<a href="https://github.com/settings/ssh" target="_blank" rel="external">https://github.com/settings/ssh</a>，添加新秘钥，效果如下图<ul><li>Title：自己随便取</li><li>Key：把刚刚复制的都粘贴进来</li><li><img src="http://img.youmeek.com/2016/hexo-start-c-3.jpg" alt="添加密钥"></li></ul></li></ul></li></ul></li></ul><h3 id="把本地的博客内容同步到-Github-上"><a href="#把本地的博客内容同步到-Github-上" class="headerlink" title="把本地的博客内容同步到 Github 上"></a>把本地的博客内容同步到 Github 上</h3><ul><li>要把本地的静态博客同步到 Github，我们还需要先安装两个跟部署相关的 hexo 插件：<ul><li>继续在 Git Bash 中输入：</li><li><code>cnpm install hexo -server --save</code></li><li><code>cnpm install hexo-deployer-git --save</code></li></ul></li><li>编辑全局 hexo 的配置文件：<strong>_config.yml</strong><ul><li>官网对此配置的介绍：<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">https://hexo.io/zh-cn/docs/configuration.html</a></li><li>我自己的编辑内容初稿（你需要认真看的是含有中文注释的内容）：</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site，这一块区域主要是设置博客的主要说明，需要注意的是：每个冒号后面都是有一个空格，然后再书写自己的内容的</span></span><br><span class="line">title: YouMeek Code</span><br><span class="line">subtitle: 这里只有代码相关，要了解更多 &gt;&gt;&gt; YouMeek.com</span><br><span class="line">description: 这里是 YouMeek.com 一部分</span><br><span class="line">author: Judas.n</span><br><span class="line">email: 363379444@qq.com</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone:</span><br><span class="line"></span><br><span class="line"><span class="comment"># URL，这一块一般可以设置的是 url 这个参数，比如我要设置绑定域名的，这里就需要填写我的域名信息</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line">url: http://code.youmeek.com</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line">source_dir: <span class="built_in">source</span></span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line">new_post_name: :title.md <span class="comment"># File name of new posts</span></span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line">external_link: <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: <span class="literal">false</span></span><br><span class="line">post_asset_folder: <span class="literal">false</span></span><br><span class="line">relative_link: <span class="literal">false</span></span><br><span class="line">future: <span class="literal">true</span></span><br><span class="line">highlight:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  line_number: <span class="literal">true</span></span><br><span class="line">  auto_detect: <span class="literal">false</span></span><br><span class="line">  tab_replace:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: yelee</span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## 这里是重点，这里是修改发布地址，因为我们前面已经加了 SSH 密钥信息在 Github 设置里面了，所以只要我们电脑里面持有那两个密钥文件就可以无需密码地跟 Github 做同步。</span></span><br><span class="line"><span class="comment">## 需要注意的是这里的 repo 采用的是 ssh 的地址，而不是 https 的。分支我们默认采用 master 分支，以后你翅膀硬了要换其他也无所谓。</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: git@github.com:judasn/judasn.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><ul><li>编辑全局配置后我们需要重新部署：<ul><li>继续在 Git Bash 中输入命令：</li><li>先清除掉已经生成的旧文件：<code>hexo clean</code></li><li>再生成一次静态文件：<code>hexo generate</code></li><li>在本地预览下：<code>hexo server</code></li><li>本地没问题之后，Ctrl + C 停掉本地预览。</li><li>在部署到 Github 之前，需要先确定你是否已经用过 Git，如果你没用过，则此时你需要做如下设置，在 Git Bash 中依次输入下面两个命令：<ul><li><code>git config --global user.email &quot;你的 Github 注册邮箱地址&quot;</code></li><li><code>git config --global user.name &quot;你的 Github 用户名&quot;</code></li></ul></li><li>使用部署命令部署到 Github 上：<code>hexo deploy</code>，有弹出下面提示框，请输入：<code>yes</code><ul><li><img src="http://img.youmeek.com/2016/hexo-start-d-1.jpg" alt="确认提交"></li></ul></li><li>提交成功效果如下：<ul><li><img src="http://img.youmeek.com/2016/hexo-start-d-2.jpg" alt="提交成功"></li></ul></li><li>访问服务器地址进行检查：<a href="http://judasn.github.io" target="_blank" rel="external">http://judasn.github.io</a>，效果如下<ul><li><img src="http://img.youmeek.com/2016/hexo-start-d-3.jpg" alt="服务器效果"></li></ul></li><li>但是，也不排除你 deploy 不了到 Github，报这个错误：<code>Host key verification failed</code>，那解决办法如下：<ul><li>还是在 Git Bash 界面中，输入如下命令：<code>ssh -T git@github.com</code>，根据界面提示，输入：<code>yes</code> 回车。之后你可以再试一下是否可以 deploy。</li></ul></li></ul></li><li>通过上面几次流程我们也就可以总结：以后，每次发表新文章要部署都按这样的流程来：<ul><li><code>hexo clean</code></li><li><code>hexo generate</code></li><li><code>hexo deploy</code></li></ul></li><li>也因为这几个命令太频繁了，所以又有了精简版的命令：<ul><li><code>hexo clean == hexo clean</code></li><li><code>hexo g == hexo generate</code></li><li><code>hexo s == hexo server</code></li><li><code>hexo d == hexo deploy</code></li></ul></li></ul><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><ul><li>绑定域名不排除会遇到很多网络问题或是七七八八，所以这里先提供先官网的一些说明：<ul><li><a href="https://help.github.com/articles/setting-up-your-pages-site-repository/" target="_blank" rel="external">https://help.github.com/articles/setting-up-your-pages-site-repository/</a></li><li><a href="https://help.github.com/articles/quick-start-setting-up-a-custom-domain/" target="_blank" rel="external">https://help.github.com/articles/quick-start-setting-up-a-custom-domain/</a></li><li><a href="https://help.github.com/articles/setting-up-an-apex-domain/" target="_blank" rel="external">https://help.github.com/articles/setting-up-an-apex-domain/</a></li><li><a href="https://help.github.com/articles/troubleshooting-custom-domains/" target="_blank" rel="external">https://help.github.com/articles/troubleshooting-custom-domains/</a></li><li><a href="https://help.github.com/articles/custom-domain-redirects-for-github-pages-sites/" target="_blank" rel="external">https://help.github.com/articles/custom-domain-redirects-for-github-pages-sites/</a></li></ul></li><li>首先我们要一个 CNAME 文件（文件名叫 CNAME，没有文件后缀的），把该文件放在 E:\git_work_space\hexo\source 目录下，以后一些需要放在根目录的资源文件都可以放这里。如果你找不到这样的文件可以到我的项目上下载：<a href="https://github.com/judasn/judasn.github.io" target="_blank" rel="external">https://github.com/judasn/judasn.github.io</a><ul><li>CNAME 上的内容需要写你具体要绑定的域名信息，比如我是：<strong>code.youmeek.com</strong>，具体你可以参考下图：<ul><li><img src="http://img.youmeek.com/2016/hexo-start-e-1.jpg" alt="设置 CNAME 文件"></li></ul></li></ul></li><li>接着我们需要到 DNSPOD 上设置域名解析：<a href="https://www.dnspod.cn/" target="_blank" rel="external">https://www.dnspod.cn/</a><ul><li><img src="http://img.youmeek.com/2016/hexo-start-e-2.jpg" alt="设置域名解析"></li><li><img src="http://img.youmeek.com/2016/hexo-start-e-3.jpg" alt="设置域名解析"></li></ul></li><li>设置好之后，等过几分钟域名解析好之后，我们访问：<a href="http://code.youmeek.com" target="_blank" rel="external">http://code.youmeek.com</a>，效果如下：    <ul><li><img src="http://img.youmeek.com/2016/hexo-start-e-4.jpg" alt="域名访问效果"></li><li>2016-08-19 更新：Github 提示，建议我们使用 CNAME 方式来指向，别用 IP，所以建议你这样配置，还是以我的为例：<ul><li>主机记录：code</li><li>记录类型：CNAME</li><li>记录值：judasn.github.io.（后面的这个点别忘记了）</li><li>还有，要记得把 CNAME 那个文件再 deploy 到 Github 哦，不然还是访问不了的。</li></ul></li></ul></li></ul><h3 id="整合-IntelliJ-IDEA-提高效率"><a href="#整合-IntelliJ-IDEA-提高效率" class="headerlink" title="整合 IntelliJ IDEA 提高效率"></a>整合 IntelliJ IDEA 提高效率</h3><ul><li>为了提交写作效率，我个人建议使用 IntelliJ IDEA 作为 Markdown 编辑工具<ul><li>IntelliJ IDEA 有各种各样的快捷键支持你的操作</li><li>IntelliJ IDEA 可以快速地全文检索项目所有的文件</li><li>对 JavaScript、CSS、HTML 等常见语言的良好支持，方便你修改你的主题</li></ul></li><li>如果你还不会使用 IntelliJ IDEA 或是 JetBrains 家其他产品，你可以看下我写一整套教程：<a href="http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/" target="_blank" rel="external">http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/</a></li><li>现在我们用 IntelliJ IDEA 打开我们本地目录：E:\git_work_space\hexo，打开后效果如下图：<ul><li><img src="http://img.youmeek.com/2016/hexo-start-f-1.jpg" alt="IntelliJ IDEA 打开项目"></li></ul></li><li>由于 IntelliJ IDEA 在 Windows 下的默认终端是 <code>cmd</code> 不好用，我们现在需要重新修改下 IntelliJ IDEA 的终端工具，把它指向我们习惯的 Git Bash，这样方便操作，如下图 gif 演示。<ul><li><img src="http://img.youmeek.com/2016/hexo-start-f-2.gif" alt="IntelliJ IDEA 下操作 hexo"></li><li>如 gif 演示，我们可以 IntelliJ IDEA 里面安心写文章、做发布等操作。</li></ul></li><li>为了更稳定地使用 IntelliJ IDEA，在不修改主题的情况下，我们还需要这样做：<ul><li><img src="http://img.youmeek.com/2016/hexo-start-f-3.jpg" alt="IntelliJ IDEA 下操作 hexo"></li></ul></li><li>hexo 新文章内容的开头需要这样定义：<ul><li>categories：表示文章所属分类</li><li>tags：表示文章所属标签</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 这是文章标题</span><br><span class="line">date: 2016-02-28 17:58:27</span><br><span class="line">categories: [Hexo,IntelliJ IDEA]</span><br><span class="line">tags: [Hexo,IntelliJ IDEA,Git,Github,Node.js]</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><ul><li>我希望从这一篇你也可以再一次了解到 IntelliJ IDEA 的美丽之处。</li><li>最后，欢迎再次来到 IntelliJ IDEA 的世界！</li></ul><ul><li>转自：<a href="http://code.youmeek.com/2016/02/28/2016/02/Hexo/" target="_blank" rel="external">http://code.youmeek.com/2016/02/28/2016/02/Hexo/</a></li></ul>]]></content>
    
    <summary type="html">
    
      本文将讲解基于 IntelliJ IDEA 如何使用 IDE 搭建 Hexo 博客、写博客！
    
    </summary>
    
      <category term="Hexo" scheme="http://blog.codesay.top/categories/Hexo/"/>
    
      <category term="IntelliJ IDEA" scheme="http://blog.codesay.top/categories/Hexo/IntelliJ-IDEA/"/>
    
      <category term="转载" scheme="http://blog.codesay.top/categories/Hexo/IntelliJ-IDEA/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="Git" scheme="http://blog.codesay.top/tags/Git/"/>
    
      <category term="Hexo" scheme="http://blog.codesay.top/tags/Hexo/"/>
    
      <category term="IntelliJ IDEA" scheme="http://blog.codesay.top/tags/IntelliJ-IDEA/"/>
    
      <category term="Github" scheme="http://blog.codesay.top/tags/Github/"/>
    
      <category term="Node.js" scheme="http://blog.codesay.top/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Git ssh配置操作指南</title>
    <link href="http://blog.codesay.top/2017/01/14/git-ssh-config/"/>
    <id>http://blog.codesay.top/2017/01/14/git-ssh-config/</id>
    <published>2017-01-14T01:07:30.000Z</published>
    <updated>2018-05-19T02:40:04.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="设置SSh"><a href="#设置SSh" class="headerlink" title="设置SSh"></a><strong>设置SSh</strong></h3><p>使用SSH密钥在本地电脑和Git服务器之间建立安全连接</p><h4 id="（1）检查是否已有SSH-key"><a href="#（1）检查是否已有SSH-key" class="headerlink" title="（1）检查是否已有SSH key"></a>（1）检查是否已有SSH key</h4><p>输入以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure></p><p>如果提示“No such file or directory“,则跳转到第3步，如果不是则继续第2步。</p><h4 id="（2）备份并删除已有的SSH-key"><a href="#（2）备份并删除已有的SSH-key" class="headerlink" title="（2）备份并删除已有的SSH key"></a>（2）备份并删除已有的SSH key</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">Lists all the subdirectories <span class="keyword">in</span> the current directory</span><br><span class="line">config id_rsa id_rsa.pub known_hosts</span><br><span class="line">$ mkdir key_backup</span><br><span class="line">makes a subdirectory called <span class="string">"key_backup"</span> <span class="keyword">in</span> the current directory</span><br><span class="line">$ cp id_rsa* key_backup</span><br><span class="line">Copies the id_rsa and id_rsa.pub files into key_backup</span><br><span class="line">$ rm id_rsa*</span><br></pre></td></tr></table></figure><p>注意，以上只有美元符号后面才是你要在命令行中输入的命令，其它是对该命令的解释说明，或者输入命令后返回的结果。</p><h4 id="（3）创建一个新的SSH-key"><a href="#（3）创建一个新的SSH-key" class="headerlink" title="（3）创建一个新的SSH key"></a>（3）创建一个新的SSH key</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"your_email@youremail.com"</span></span><br><span class="line">Creates a new ssh key using the provided email</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;press enter&gt;</span><br></pre></td></tr></table></figure><p>首先注意，<a href="mailto:your_email@youremail.com" target="_blank" rel="external">your_email@youremail.com</a>这里要用你自己的邮箱地址，可别真的复制粘贴这个命令，那就有点2B了。<br>然后会提示输入passphrase（密码）：<br>Enter passphrase(empty for no passphrase):&lt;输入你的密码&gt;<br>Enter same passphrase again:&lt;再次输入你的密码&gt;</p><h4 id="4-将SSH-key添加到Git服务器中"><a href="#4-将SSH-key添加到Git服务器中" class="headerlink" title="(4) 将SSH key添加到Git服务器中"></a>(4) 将SSH key添加到Git服务器中</h4><p>在Git服务器中点击Profile Settings，然后点击SSH Keys&lt;，点击Add SSH Key，参考下图：</p><p><img src="http://172.21.1.54/uploads/root/qr-document-project/93f9bb359f/20160606151738.jpg" alt="20160606151738"></p><p>使用文本编辑器打开id_rsa.pub文件。就会显示你的公共SSH密钥。<br>然后把它复制到”Key”字段中，参考下图：</p><p><img src="http://172.21.1.54/uploads/root/qr-document-project/bfaec9852f/image.png" alt="image"></p><h4 id="（5）测试"><a href="#（5）测试" class="headerlink" title="（5）测试"></a>（5）测试</h4><p>为了确保一切正常，需要进行小小的测试。<br> 在命令行中输入下面的命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@172.21.1.54</span><br></pre></td></tr></table></figure></p><p>正常情况下就会看到： Welcome to GitLab, xxx</p><p>配置成功后，push代码到服务器，就不会提示需要输入用户名、密码了，如下：</p><p><img src="http://172.21.1.54/uploads/root/qr-document-project/2128845cce/image.png" alt="image"></p><h4 id="6-设置信息"><a href="#6-设置信息" class="headerlink" title="(6) 设置信息"></a>(6) 设置信息</h4><p>现在Git已经设置完毕，也输入了SSH Key,就可以配置个人信息了。</p><p>设置用户名和email<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"Firstname Lastname"</span></span><br><span class="line">Sets the name of the user <span class="keyword">for</span> all git instances on the system</span><br><span class="line">$ git config --global user.email your_email@youremail.com</span><br></pre></td></tr></table></figure></p><p>需要注意的是，这里的name是你的真名，不是Git的注册账号。</p><p>到这里，Git的设置工作就圆满了。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;设置SSh&quot;&gt;&lt;a href=&quot;#设置SSh&quot; class=&quot;headerlink&quot; title=&quot;设置SSh&quot;&gt;&lt;/a&gt;&lt;strong&gt;设置SSh&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;使用SSH密钥在本地电脑和Git服务器之间建立安全连接&lt;/p&gt;
&lt;h4 id=&quot;（
      
    
    </summary>
    
      <category term="版本控制" scheme="http://blog.codesay.top/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    
      <category term="Git" scheme="http://blog.codesay.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git环境搭建及使用指南</title>
    <link href="http://blog.codesay.top/2017/01/12/Git%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://blog.codesay.top/2017/01/12/Git环境搭建及使用指南/</id>
    <published>2017-01-12T02:07:30.000Z</published>
    <updated>2018-05-19T02:40:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git环境搭建及使用指南"><a href="#Git环境搭建及使用指南" class="headerlink" title="Git环境搭建及使用指南"></a>Git环境搭建及使用指南</h2><h3 id="1、Git简介"><a href="#1、Git简介" class="headerlink" title="1、Git简介"></a>1、Git简介</h3><p>Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。Git与SVN最大的区别就是，Git是分布式的，绝大多数操作都只需要访问本地文件和资源，不用连网，而SVN差不多所有操作都需要连接网络，所以Git处理的速度也要快很多。</p><a id="more"></a><h3 id="2、Git服务器–GitLab"><a href="#2、Git服务器–GitLab" class="headerlink" title="2、Git服务器–GitLab"></a>2、Git服务器–GitLab</h3><blockquote><p>GitLab一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务。</p></blockquote><p>Git服务器比较有名的是gitosis和gitolite，这两个管理和使用起来稍微有些复杂，没有web页面，而gitlab则是类似于github的一个工具，github无法免费建立私有仓库，并且为了代码安全，于是需要在内网安装一个git服务器，多方比较，选择了gitlab，gitlab有很多依赖，而bitnami制作了<a href="https://bitnami.com/stack/gitlab/installer#" target="_blank" rel="external">一键安装</a>的包 ，使得安装非常简洁。<a href="https://wiki.bitnami.com/Applications/BitNami_GitLab#How_to_start.2fstop_the_servers.3" target="_blank" rel="external">Bitnami GitLab Wiki</a></p><h2 id="3、Git客户端"><a href="#3、Git客户端" class="headerlink" title="3、Git客户端"></a>3、Git客户端</h2><p>Git的客户端目前应该至少有四种:</p><ul><li><a href="http://msysgit.github.io/" target="_blank" rel="external">msysqit</a> – 有图形界面，还带了一个命令行界面（Git Bash） （命令行比较推荐这款）</li><li><a href="https://www.sourcetreeapp.com/" target="_blank" rel="external">SourceTree</a> –图形化管理工具 （图形工具推荐这款，代码比较工具使用BeyoundCompare） , 入门基础：<a href="http://www.jianshu.com/p/be9f0484af9d" target="_blank" rel="external">http://www.jianshu.com/p/be9f0484af9d</a></li><li>Git Extensions</li><li><a href="http://download.tortoisegit.org/" target="_blank" rel="external">TortoiseGit</a> –用惯了TortoiseSVN的可以使用这一款，但是界面上面的功能还是没有命令行的全面和灵活</li></ul><h2 id="4、Git的使用"><a href="#4、Git的使用" class="headerlink" title="4、Git的使用"></a>4、Git的使用</h2><p> (1) <a href="git-ssh-config">初始环境配置</a></p><p> (2) Git的基本命令</p><ul><li><a href="#git-clone">git clone</a>                #工程克隆</li><li><a href="#git-status">git status</a>               #查看文件缓存状态</li><li><a href="#git-add">git add</a>         #添加至暂存区</li><li><a href="#git-reset">git reset</a>          #取消缓存修改(还原)</li><li><a href="#git-diff">git diff </a>                   #文件比较</li><li><a href="#git-checkout">git checkout </a>         #放弃文件修改</li><li><a href="#git-commit">git commit</a>             #提交本地仓库</li><li><p><a href="#git-log">git log</a>           #查看提交日志</p><p>远程操作命令:</p></li><li><p><a href="#git-remote">git remote</a>          #列出远程别名</p></li><li><a href="#git-fetch">git fetch</a>             #从远程仓库下载代码</li><li><a href="#git-pull">git pull</a>              #从远程仓库下载代码并合并 相当于(git fetch + git merge)</li><li><a href="#git-push">git push</a>          #向远程仓库推送代码</li></ul><p>操作图如下：</p><p><img src="http://172.21.1.54/uploads/root/qr-document-project/c59ba1963a/image.png" alt="image"></p><h4 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a><strong>git clone</strong></h4><blockquote><p>从git服务器上面克隆项目到本地目录</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git://github.com/schacon/simplegit.git</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> /private/tmp/simplegit/.git/</span><br><span class="line">remote: Counting objects: 100, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (86/86), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 100 (delta 35), reused 0 (delta 0)</span><br><span class="line">Receiving objects: 100% (100/100), 9.51 KiB, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (35/35), <span class="keyword">done</span>.</span><br><span class="line">$ <span class="built_in">cd</span> simplegit/</span><br><span class="line">$ ls</span><br><span class="line">README   Rakefile lib</span><br></pre></td></tr></table></figure><h4 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a><strong>git status</strong></h4><blockquote><p>查看你的代码在缓存与当前工作目录的状态</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line"># On branch master</span><br><span class="line">#</span><br><span class="line"># Initial commit</span><br><span class="line">#</span><br><span class="line"># Changes to be committed:</span><br><span class="line">#   (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</span><br><span class="line">#</span><br><span class="line"># new file:   README</span><br><span class="line"># new file:   hello.rb</span><br><span class="line">#</span><br><span class="line"># Changed but not updated:</span><br><span class="line">#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">#</span><br><span class="line"># modified:   README</span><br><span class="line">#</span><br></pre></td></tr></table></figure><p>git status 查看的状态有两种颜色，绿色表示的是在缓存区的修改的文件，红色表示的是当前修改的文件</p><p>加上 -s 参数可以以简短的形式输出，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line">AM README</span><br><span class="line">A  hello.rb</span><br></pre></td></tr></table></figure></p><p><code>一言以蔽之，执行 git status 以查看在你上次提交之后有啥被修改或者临时提交了， 从而决定自己是否需要提交一次快照，同时也能知道有什么改变被记录进去了。</code></p><h4 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a><strong>git add</strong></h4><blockquote><p>添加文件到缓存</p></blockquote><p>有两种情况需要执行git add 将文件添加至缓存</p><ul><li>1、在git commit 提交你修改的文件之前，你需要先执行git add 将文件添加至缓存。如果执行git commit -a -m ‘’就可以跳过缓存直接提交修改的文件</li><li>2、对于新增加的文件，必须先执行git add将文件添加至缓存，才能提交。如：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line">?? README</span><br><span class="line">?? hello.rb</span><br></pre></td></tr></table></figure><p>我们有俩尚未被追踪的文件，得添加一下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add README hello.rb</span><br></pre></td></tr></table></figure></p><p>现在我们再执行 git status，就可以看到这俩文件已经加上去了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line">A  README</span><br><span class="line">A  hello.rb</span><br></pre></td></tr></table></figure><p>新项目中，添加所有文件很普遍，可以在当前工作目录执行命令：git add .。 因为 Git 会递归地将你执行命令时所在的目录中的所有文件添加上去，所以如果你将当前的工作目录作为参数， 它就会追踪那儿的所有文件了。如此，git add . 就和 git add README hello.rb 有一样的效果。 此外，效果一致的还有 git add *，不过那只是因为我们这还木有子目录，不需要递归地添加新文件。</p><h4 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a><strong>git reset</strong></h4><blockquote><p>取消缓存已缓存的内容</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line"> M README</span><br><span class="line"> M hello.rb</span><br><span class="line">$ git add .</span><br><span class="line">$ git status -s</span><br><span class="line">M  README</span><br><span class="line">M  hello.rb</span><br><span class="line">$ git reset HEAD -- hello.rb </span><br><span class="line">Unstaged changes after reset:</span><br><span class="line">M hello.rb</span><br><span class="line">$ git status -s</span><br><span class="line">M  README</span><br><span class="line"> M hello.rb</span><br></pre></td></tr></table></figure><p>实际的操作是将该文件在“索引”中的校验和重置为最近一次提交中的值。 git add 会计算一个文件的校验和，将它添加到“索引”中， 而 git reset HEAD 将它改写回原先的，从而取消缓存操作。</p><h4 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff "></a><strong>git diff </strong></h4><blockquote><p> 显示已写入缓存与已修改但尚未写入缓存的改动的区别</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git diff #尚未缓存的改动</span><br><span class="line">git diff --cached #查看已缓存的改动</span><br><span class="line">git diff HEAD 查看已缓存的与未缓存的所有改动</span><br><span class="line">git diff --stat 显示摘要而非整个 diff</span><br></pre></td></tr></table></figure><p>如果只比较某个文件，将文件的路径及文件名称加在命令之后即可，如： git diff README</p><h4 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a><strong>git checkout</strong></h4><p>有两个作用:</p><ul><li>(1) 切换分支</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch (branchname) 创建新分支</span><br><span class="line">$ git checkout -b (branchname) 创建新分支，并立即切换到它</span><br><span class="line">$ git branch -d (branchname) 删除分支</span><br></pre></td></tr></table></figure><ul><li>(1) 丢弃刚修改的内容<br>如果你刚修改的一些文件，还没有git add 也没有 提交，需要还原到没修改的时候的状态，则可以执行git checkout (filename) 来还原。</li></ul><h4 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a><strong>git commit</strong></h4><blockquote><p>记录缓存内容的快照，将内容提交到本地仓库</p></blockquote><p>现在你使用 git add 命令将想要快照的内容写入了缓存， 执行 git commit 就将它实际存储快照了。 Git 为你的每一个提交都记录你的名字与电子邮箱地址，所以第一步是告诉 Git 这些都是啥。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &apos;Your Name&apos;</span><br><span class="line">$ git config --global user.email you@somedomain.com</span><br></pre></td></tr></table></figure><p>让我们写入缓存，并提交对 hello.rb 的所有改动。在首个例子中，我们使用 -m 选项以在命令行中提供提交注释。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git add hello.rb </span><br><span class="line">$ git status -s</span><br><span class="line">M  hello.rb</span><br><span class="line">$ git commit -m &apos;my hola mundo changes&apos;</span><br><span class="line">[master 68aa034] my hola mundo changes</span><br><span class="line"> 1 files changed, 2 insertions(+), 1 deletions(-)</span><br></pre></td></tr></table></figure><p>在执行 git status 查看状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line"># On branch master</span><br><span class="line">nothing to commit (working directory clean)</span><br></pre></td></tr></table></figure><p>跳过 git add ,直接自动提交，则执行 git commit -a </p><h4 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a><strong>git log</strong></h4><blockquote><p>查看提交日志</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br><span class="line">git log --author 只寻找某个特定作者的提交</span><br><span class="line">git log (filename)</span><br></pre></td></tr></table></figure><h4 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a><strong>git remote</strong></h4><blockquote><p>列出远程别名</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git remote</span><br><span class="line">origin</span><br><span class="line">$ git remote -v</span><br><span class="line">origingit@github.com:github/git-reference.git (fetch)</span><br><span class="line">origingit@github.com:github/git-reference.git (push)</span><br></pre></td></tr></table></figure><p>创建新的远程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git remote</span><br><span class="line">$ git remote add github git@github.com:schacon/hw.git</span><br><span class="line">$ git remote -v</span><br><span class="line">githubgit@github.com:schacon/hw.git (fetch)</span><br><span class="line">githubgit@github.com:schacon/hw.git (push)</span><br></pre></td></tr></table></figure><p>删除远程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote rm 删除现存的某个别名</span><br></pre></td></tr></table></figure><p>修改远程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote set-url origin git@github.com:someaccount/someproject.git</span><br></pre></td></tr></table></figure><h4 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a><strong>git fetch</strong></h4><blockquote><p>从远程仓库下载代码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch origin</span><br></pre></td></tr></table></figure><h4 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a><strong>git pull</strong></h4><blockquote><p>从远程仓库下载代码并合并 相当于(git fetch + git merge)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin master #相当于git fetch之后git merge合并</span><br></pre></td></tr></table></figure><h4 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a><strong>git push</strong></h4><blockquote><p>向远程仓库推送代码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master #推送你的master分支与数据到远端仓库</span><br><span class="line">$ git push origin master （省略了&lt;dst&gt;，等价于“git push origin master:master”）</span><br><span class="line">$ git push origin branch1 #推送分支到远程</span><br><span class="line">$ git push origin :branch1 （再origin repository里面查找branch1，删除它。用一个空的去更新它，就相当于删除了）</span><br></pre></td></tr></table></figure><p>更多详细的命令使用说明，请参考：<a href="http://gitref.org/zh/creating/#init" target="_blank" rel="external">Git中文参考手册</a></p><p>网上的一些GIT及workflow教程参考：</p><ul><li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></li><li><a href="https://segmentfault.com/a/1190000002918123#articleHeader11" target="_blank" rel="external">https://segmentfault.com/a/1190000002918123#articleHeader11</a></li><li><a href="http://blog.jobbole.com/76867/" target="_blank" rel="external">http://blog.jobbole.com/76867/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Git环境搭建及使用指南&quot;&gt;&lt;a href=&quot;#Git环境搭建及使用指南&quot; class=&quot;headerlink&quot; title=&quot;Git环境搭建及使用指南&quot;&gt;&lt;/a&gt;Git环境搭建及使用指南&lt;/h2&gt;&lt;h3 id=&quot;1、Git简介&quot;&gt;&lt;a href=&quot;#1、Git简介&quot; class=&quot;headerlink&quot; title=&quot;1、Git简介&quot;&gt;&lt;/a&gt;1、Git简介&lt;/h3&gt;&lt;p&gt;Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。Git与SVN最大的区别就是，Git是分布式的，绝大多数操作都只需要访问本地文件和资源，不用连网，而SVN差不多所有操作都需要连接网络，所以Git处理的速度也要快很多。&lt;/p&gt;
    
    </summary>
    
      <category term="版本控制" scheme="http://blog.codesay.top/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    
      <category term="Git" scheme="http://blog.codesay.top/tags/Git/"/>
    
      <category term="GitLab" scheme="http://blog.codesay.top/tags/GitLab/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate-BeanValidate参考手册</title>
    <link href="http://blog.codesay.top/2016/12/12/Hibernate-Bean%E9%AA%8C%E8%AF%81%E8%B5%84%E6%96%99/"/>
    <id>http://blog.codesay.top/2016/12/12/Hibernate-Bean验证资料/</id>
    <published>2016-12-12T10:07:30.000Z</published>
    <updated>2018-05-19T02:40:04.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="官方文档提供的验证注解及说明"><a href="#官方文档提供的验证注解及说明" class="headerlink" title="官方文档提供的验证注解及说明"></a>官方文档提供的验证注解及说明</h3><a id="more"></a><table><thead><tr><th>注解</th><th>适用的数据类型</th><th>说明</th></tr></thead><tbody><tr><td>@AssertTrue</td><td>Boolean, boolean</td><td>验证注解的元素值是true</td></tr><tr><td>@DecimalMax（value=x）</td><td>BigDecimal, BigInteger, String, byte,short, int, long and the respective wrappers of the primitive types. Additionally supported by HV: any sub-type of Number andCharSequence.</td><td>验证注解的元素值小于等于@ DecimalMax指定的value值</td></tr><tr><td>@DecimalMin（value=x）</td><td>BigDecimal, BigInteger, String, byte,short, int, long and the respective wrappers of the primitive types. Additionally supported by HV: any sub-type of Number andCharSequence.</td><td>验证注解的元素值小于等于@ DecimalMin指定的value值</td></tr><tr><td>@Digits(integer=整数位数, fraction=小数位数)</td><td>BigDecimal, BigInteger, String, byte,short, int, long and the respective wrappers of the primitive types. Additionally supported by HV: any sub-type of Number andCharSequence.</td><td>验证注解的元素值的整数位数和小数位数上限</td></tr><tr><td>@Future</td><td>java.util.Date, java.util.Calendar; Additionally supported by HV, if theJoda Time date/time API is on the class path: any implementations ofReadablePartial andReadableInstant.</td><td>验证注解的元素值（日期类型）比当前时间晚</td></tr><tr><td>@Max（value=x）</td><td>BigDecimal, BigInteger, byte, short,int, long and the respective wrappers of the primitive types. Additionally supported by HV: any sub-type ofCharSequence (the numeric value represented by the character sequence is evaluated), any sub-type of Number.</td><td>验证注解的元素值小于等于@Max指定的value值</td></tr><tr><td>@Min（value=x）</td><td>BigDecimal, BigInteger, byte, short,int, long and the respective wrappers of the primitive types. Additionally supported by HV: any sub-type of CharSequence (the numeric value represented by the char sequence is evaluated), any sub-type of Number.</td><td>验证注解的元素值大于等于@Min指定的value值</td></tr><tr><td>@NotNull</td><td>Any type</td><td>验证注解的元素值不是null</td></tr><tr><td>@Null</td><td>Any type</td><td>验证注解的元素值是null</td></tr><tr><td>@Past</td><td>java.util.Date, java.util.Calendar; Additionally supported by HV, if theJoda Time date/time API is on the class path: any implementations ofReadablePartial andReadableInstant.</td><td>验证注解的元素值（日期类型）比当前时间早</td></tr><tr><td>@Pattern(regex=正则表达式, flag=)</td><td>String. Additionally supported by HV: any sub-type of CharSequence.</td><td>验证注解的元素值与指定的正则表达式匹配</td></tr><tr><td>@Size(min=最小值, max=最大值)</td><td>String, Collection, Map and arrays. Additionally supported by HV: any sub-type of CharSequence.</td><td>验证注解的元素值的在min和max（包含）指定区间之内，如字符长度、集合大小</td></tr><tr><td>@Valid</td><td>Any non-primitive type（引用类型）</td><td>验证关联的对象，如账户对象里有一个订单对象，指定验证订单对象</td></tr><tr><td>@NotEmpty</td><td>CharSequence,Collection, Map and Arrays</td><td>验证注解的元素值不为null且不为空（字符串长度不为0、集合大小不为0）</td></tr><tr><td>@Range(min=最小值, max=最大值)</td><td>CharSequence, Collection, Map and Arrays,BigDecimal, BigInteger, CharSequence, byte, short, int, long and the respective wrappers of the primitive types</td><td>验证注解的元素值在最小值和最大值之间</td></tr><tr><td>@NotBlank</td><td>CharSequence</td><td>验证注解的元素值不为空（不为null、去除首位空格后长度为0），不同于@NotEmpty，@NotBlank只应用于字符串且在比较时会去除字符串的空格</td></tr><tr><td>@Length(min=下限, max=上限)</td><td>CharSequence</td><td>验证注解的元素值长度在min和max区间内</td></tr><tr><td>@Email</td><td>CharSequence</td><td>验证注解的元素值是Email，也可以通过正则表达式和flag指定自定义的email格式</td></tr></tbody></table><h3 id="常用校验示例"><a href="#常用校验示例" class="headerlink" title="常用校验示例"></a>常用校验示例</h3><p>空校验<br>@NotEmpty(message = “用户名不能为空”, groups = EditGroup.class)</p><p>邮箱校验<br>@Email(message=”邮箱格式不正确”)</p><p>长度校验<br>@Length(min=0, max=200, message=”邮箱长度必须介于 1 和 200 之间”)</p><p>@Min (value= 18 ,message= “必须年满18岁！” )  </p><p>@Max (value= 30 ,message= “年龄不能大于30岁！” )  </p><p>@NotBlank(message=”名字不能为空或者空串”)</p><p>@Past(message=”时间不能晚于当前时间”)</p><p> @Size (max= 11 ,min= 11 ,message= “长度只能为11位！” )  </p><p>@Pattern(regexp=”/^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{5,10}$/“,message=”密码必须是5~10位数字和字母的组合”)</p><h3 id="日期格式化注解"><a href="#日期格式化注解" class="headerlink" title="日期格式化注解"></a>日期格式化注解</h3><p>@JsonFormat(pattern = “yyyy-MM-dd HH:mm:ss”)</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;官方文档提供的验证注解及说明&quot;&gt;&lt;a href=&quot;#官方文档提供的验证注解及说明&quot; class=&quot;headerlink&quot; title=&quot;官方文档提供的验证注解及说明&quot;&gt;&lt;/a&gt;官方文档提供的验证注解及说明&lt;/h3&gt;
    
    </summary>
    
      <category term="BeanValidate" scheme="http://blog.codesay.top/categories/BeanValidate/"/>
    
    
      <category term="后台校验" scheme="http://blog.codesay.top/tags/%E5%90%8E%E5%8F%B0%E6%A0%A1%E9%AA%8C/"/>
    
      <category term="BeanValidate" scheme="http://blog.codesay.top/tags/BeanValidate/"/>
    
  </entry>
  
  <entry>
    <title>PL/SQL入门</title>
    <link href="http://blog.codesay.top/2016/11/15/PLSQL%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://blog.codesay.top/2016/11/15/PLSQL入门指南/</id>
    <published>2016-11-15T03:07:30.000Z</published>
    <updated>2018-05-19T02:40:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PL-SQL入门大纲"><a href="#PL-SQL入门大纲" class="headerlink" title="PL/SQL入门大纲"></a>PL/SQL入门大纲</h2><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ol><li>PL/SQL概念</li></ol><ul><li>Oracle高级数据库程序设计语言</li><li>SQL + ?</li><li>PL/SQL优势</li><li>PL/SQL用处<a id="more"></a></li></ul><ol start="2"><li>PL/SQL块结构</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PL/SQL程序由三个块组成，即声明部分、执行部分、异常处理部分。</span><br><span class="line"></span><br><span class="line">PL/SQL块的结构如下：</span><br><span class="line"></span><br><span class="line">DECLARE  </span><br><span class="line">/* 声明部分: 在此声明PL/SQL用到的变量,类型及游标，以及局部的存储过程和函数 */</span><br><span class="line">BEGIN</span><br><span class="line">    /*  执行部分:  过程及SQL 语句  , 即程序的主要部分  */</span><br><span class="line">EXCEPTION</span><br><span class="line">   /* 执行异常部分: 错误处理  */</span><br><span class="line">END;</span><br><span class="line"></span><br><span class="line">其中 执行部分是必须的。</span><br></pre></td></tr></table></figure><ol start="3"><li>PL/SQL流程控制语句</li></ol><ul><li>条件语句</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">IF &lt;布尔表达式&gt; THEN</span><br><span class="line">PL/SQL 和 SQL语句</span><br><span class="line">ELSIF &lt; 其它布尔表达式&gt; THEN</span><br><span class="line">其它语句</span><br><span class="line">ELSIF &lt; 其它布尔表达式&gt; THEN</span><br><span class="line">其它语句</span><br><span class="line">ELSE</span><br><span class="line">其它语句</span><br><span class="line">END IF;</span><br></pre></td></tr></table></figure><ul><li>循环语句</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LOOP</span><br><span class="line">      要执行的语句;</span><br><span class="line">      EXIT WHEN &lt;条件语句&gt;       /*条件满足，退出循环语句*/</span><br><span class="line">END LOOP;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WHILE &lt;布尔表达式&gt; LOOP</span><br><span class="line">    要执行的语句;</span><br><span class="line">END LOOP;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FOR 循环计数器 IN [ REVERSE ] 下限 .. 上限 LOOP</span><br><span class="line">  要执行的语句;</span><br><span class="line">END LOOP;</span><br><span class="line">每循环一次，循环变量自动加1；使用关键字REVERSE，循环变量自动减1。跟在IN REVERSE 后面的数字必须是从小到大的顺序，而且必须是整数，不能是变量或表达式。可以使用EXIT 退出循环。</span><br></pre></td></tr></table></figure><ul><li>标号和GOTO</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GOTO   label;</span><br><span class="line"> . . .  . . .</span><br><span class="line">&lt;&lt;label&gt;&gt;　/*标号是用&lt;&lt;　&gt;&gt;括起来的标识符 */</span><br></pre></td></tr></table></figure><ol start="4"><li>游标</li></ol><ul><li>显示游标</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">显式游标处理需四个 PL/SQL步骤:</span><br><span class="line">1.定义游标：就是定义一个游标名，以及与其相对应的SELECT 语句。</span><br><span class="line">格式：</span><br><span class="line">CURSOR cursor_name[(parameter[, parameter]…)] IS select_statement;</span><br><span class="line">游标参数只能为输入参数，其格式为：</span><br><span class="line">parameter_name [IN] datatype [&#123;:= | DEFAULT&#125; expression]</span><br><span class="line">在指定数据类型时，不能使用长度约束。如NUMBER(4)、CHAR(10) 等都是错误的。</span><br><span class="line">2.打开游标：就是执行游标所对应的SELECT 语句，将其查询结果放入工作区，并且指针指向工作区的首部，标识游标结果集合。如果游标查询语句中带有FOR UPDATE选项，OPEN 语句还将锁定数据库表中游标结果集合对应的数据行。</span><br><span class="line">格式：</span><br><span class="line">OPEN cursor_name[([parameter =&gt;] value[, [parameter =&gt;] value]…)];</span><br><span class="line">在向游标传递参数时，可以使用与函数参数相同的传值方法，即位置表示法和名称表示     法。PL/SQL 程序不能用OPEN 语句重复打开一个游标。</span><br><span class="line">3.提取游标数据：就是检索结果集合中的数据行，放入指定的输出变量中。 </span><br><span class="line">格式：</span><br><span class="line">FETCH cursor_name INTO &#123;variable_list | record_variable &#125;;</span><br><span class="line">对该记录进行处理；</span><br><span class="line">继续处理，直到活动集合中没有记录；</span><br><span class="line">4关闭游标：当提取和处理完游标结果集合数据后，应及时关闭游标，以释放该游标所占用的系统资源，并使该游标的工作区变成无效，不能再使用FETCH 语句取其中数据。关闭后的游标可以使用OPEN 语句重新打开。</span><br><span class="line">格式：</span><br><span class="line">CLOSE cursor_name;</span><br></pre></td></tr></table></figure><ul><li>隐式游标</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">隐式游标属性</span><br><span class="line"> SQL%FOUND       布尔型属性,当最近一次读记录时成功返回，则值为true；</span><br><span class="line"> SQL%NOTFOUND   布尔型属性,与%found相反；</span><br><span class="line"> SQL %ROWCOUNT  数字型属性, 返回已从游标中读取得记录数；</span><br><span class="line"> SQL %ISOPEN    布尔型属性, 取值总是FALSE。SQL命令执行完毕立即关闭隐式游标。</span><br><span class="line"></span><br><span class="line">删除EMP 表中某部门的所有员工，如果该部门中已没有员工，则在DEPT 表中删除该部门。</span><br><span class="line">DECLARE</span><br><span class="line">V_deptno emp.deptno%TYPE :=&amp;p_deptno;</span><br><span class="line">BEGIN</span><br><span class="line">DELETE FROM emp WHERE deptno=v_deptno;</span><br><span class="line">IF SQL%NOTFOUND THEN</span><br><span class="line">DELETE FROM dept WHERE deptno=v_deptno;</span><br><span class="line">END IF;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><ol start="5"><li>异常处理</li></ol><ul><li>预定义错误</li><li>非预定义错误</li><li>用户定义错误</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">异常处理部分一般放在 PL/SQL 程序体的后半部,结构为:</span><br><span class="line">EXCEPTION</span><br><span class="line">   WHEN first_exception THEN  &lt;code to handle first exception &gt;</span><br><span class="line">   WHEN second_exception THEN  &lt;code to handle second exception &gt;</span><br><span class="line">   WHEN OTHERS THEN  &lt;code to handle others exception &gt;</span><br><span class="line">END;</span><br><span class="line">异常处理可以按任意次序排列,但 OTHERS 必须放在最后.</span><br></pre></td></tr></table></figure><ol start="6"><li>函数与存储过程</li></ol><ul><li>创建函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE [OR REPLACE] FUNCTION function_name</span><br><span class="line">[(argment [ &#123; IN| IN OUT &#125;] type,</span><br><span class="line">     argment [ &#123; IN | OUT | IN OUT &#125; ] type]</span><br><span class="line">RETURN return_type </span><br><span class="line">&#123; IS | AS &#125;</span><br><span class="line">&lt;类型.变量的说明&gt; </span><br><span class="line">BEGIN</span><br><span class="line">FUNCTION_body</span><br><span class="line">EXCEPTION</span><br><span class="line">其它语句</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><ul><li>创建过程</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE [OR REPLACE] PROCEDURE Procedure_name</span><br><span class="line">[ (argment [ &#123; IN | IN OUT &#125;] Type,</span><br><span class="line">      argment [ &#123; IN | OUT | IN OUT &#125; ] Type ]</span><br><span class="line">&#123; IS | AS &#125;</span><br><span class="line">&lt;类型.变量的说明&gt; </span><br><span class="line">BEGIN</span><br><span class="line">&lt;执行部分&gt;</span><br><span class="line">EXCEPTION</span><br><span class="line">&lt;可选的异常错误处理程序&gt;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;PL-SQL入门大纲&quot;&gt;&lt;a href=&quot;#PL-SQL入门大纲&quot; class=&quot;headerlink&quot; title=&quot;PL/SQL入门大纲&quot;&gt;&lt;/a&gt;PL/SQL入门大纲&lt;/h2&gt;&lt;h3 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;PL/SQL概念&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Oracle高级数据库程序设计语言&lt;/li&gt;
&lt;li&gt;SQL + ?&lt;/li&gt;
&lt;li&gt;PL/SQL优势&lt;/li&gt;
&lt;li&gt;PL/SQL用处
    
    </summary>
    
      <category term="数据库" scheme="http://blog.codesay.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Oracle" scheme="http://blog.codesay.top/tags/Oracle/"/>
    
      <category term="PL/SQL" scheme="http://blog.codesay.top/tags/PL-SQL/"/>
    
  </entry>
  
</feed>
